{"version":3,"sources":["components/BserItem/BserItem.jsx","components/SideBar/SideBar.jsx","components/SideBar/index.jsx","components/BserMap/BserMap.jsx","components/BserMap/index.jsx","components/MapSideBarWrapper/MapSideBarWrapper.jsx","components/MapSideBarWrapper/index.jsx","App.js","reportWebVitals.js","index.js"],"names":["GradeColor","Common","fill","StyledImg","styled","img","grade","border","AltTextFontWrapper","span","ItemBackground","div","size","ImageColorBackground","focus","theme","colors","secondary","Item","QuantityText","BserItem","item","quantity","itemName","codeToName","imgSrc","process","src","alt","SidebarBox","Header","h1","Text","p","Subtitle","h2","ItemHolderBox","SideBar","selectedItem","area","areas","itemCount","areaItemCount","areaItem","zoneItem","mandatoryCount","leftoverCount","boxes","box","zone","Math","floor","zoneLeftovers","map","index","zoneName","englishName","Object","keys","count","chance","cdf","pmf","toFixed","zoneColors","StyledSvg","svg","StyledText","text","BserMap","setSelectedItem","maxScale","minScale","showControls","xmlns","xmlnsXlink","viewBox","id","width","height","xlinkHref","transform","coords","onClick","Wrapper","MapSideBarWrapper","useState","Background","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2430aea4.chunk.js","sourcesContent":["import styled from \"styled-components\";\nimport codeToName from \"../../data/codeToName.json\";\n\nconst GradeColor = {\n    Common: {\n        fill: \"linear-gradient(hsla(0, 0%, 50%, 1), hsla(0, 0%, 60%, 1))\",\n    },\n};\n\nconst StyledImg = styled.img`\n    height: 100%;\n    /* filter: drop-shadow(1px 1px 0 ${({ grade }) => GradeColor[grade].border})\n        drop-shadow(-1px 1px 0 ${({ grade }) => GradeColor[grade].border})\n        drop-shadow(1px -1px 0 ${({ grade }) => GradeColor[grade].border})\n        drop-shadow(-0.1px -0.1px 0 ${({ grade }) =>\n        GradeColor[grade].border}); */\n`;\n\nconst AltTextFontWrapper = styled.span`\n    height: 100%;\n    font-size: 0.6rem;\n`;\n\nconst ItemBackground = styled.div`\n    border-radius: 1px;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    padding: 2px;\n    border-radius: 3px;\n    margin: 0.1rem;\n    height: ${({ size }) => (size === \"small\" ? \"1.5rem\" : \"2rem\")};\n    width: ${({ size }) => (size === \"small\" ? \"2.7rem\" : \"3.6rem\")};\n`;\n\nconst ImageColorBackground = styled(ItemBackground)`\n    background: ${({ grade }) => GradeColor[grade].fill};\n    position: relative;\n    /* border: ${({ grade }) => GradeColor[grade].border} solid 2px; */\n    /* border-radius: 3px; */\n    background-clip: padding-box;\n    border: ${({ focus, theme }) =>\n        focus ? `${theme.colors.secondary} 2px solid` : `transparent`};\n`;\n\nconst Item = styled.div`\n    display: flex;\n    align-items: center;\n    justify-content: center;\n`;\n\nconst QuantityText = styled.div`\n    position: absolute;\n    bottom: 0;\n    right: 0;\n    background-color: hsl(0, 0%, 17.5%);\n    color: hsl(0, 0%, 87%);\n    padding: 0 0.2rem;\n    font-size: 0.9rem;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    border-radius: 3px;\n`;\n\nfunction BserItem({ item, quantity, size }) {\n    let itemName = codeToName[item];\n\n    let imgSrc = process.env.PUBLIC_URL + \"/images/items/\" + item + \".png\";\n\n    return (\n        <Item>\n            <ImageColorBackground grade={\"Common\"} size={size}>\n                <AltTextFontWrapper>\n                    <StyledImg grade={\"Common\"} src={imgSrc} alt={itemName} />\n                </AltTextFontWrapper>\n                {quantity && <QuantityText>{quantity}</QuantityText>}\n            </ImageColorBackground>\n        </Item>\n    );\n}\n\nexport default BserItem;\n","import styled from \"styled-components\";\nimport areas from \"../../data/areas.json\";\nimport areaItemCount from \"../../data/areaItemCount.json\";\nimport BserItem from \"../BserItem/BserItem\";\nimport boxes from \"../../data/boxes.json\";\nimport cdf from \"@stdlib/stats-base-dists-hypergeometric-cdf\";\nimport pmf from \"@stdlib/stats-base-dists-hypergeometric-pmf\";\n\nconst SidebarBox = styled.div`\n    width: 40%;\n    background-color: hsl(240, 5%, 30%);\n    display: flex;\n    padding: 0px 20px;\n    flex-direction: column;\n    align-items: start;\n    /* position: relative;\n    ::after {\n        content: \"\";\n        position: absolute;\n        left: 0;\n        top: 50%;\n        transform: translate(-50%, -50%);\n        width: 10px;\n        height: 50px;\n        background-color: hsl(240, 5%, 30%);\n    } */\n`;\n\nconst Header = styled.h1`\n    margin: 0.8rem 0px;\n    color: hsl(0, 0%, 87%);\n`;\n\nconst Text = styled.p`\n    font-size: 1rem;\n    margin: 0.2rem 0px;\n    color: hsl(0, 0%, 60%);\n`;\n\nconst Subtitle = styled.h2`\n    margin: 0.4rem 0px;\n    color: hsl(0, 0%, 60%);\n`;\n\nconst ItemHolderBox = styled.div`\n    margin-bottom: 0.2rem;\n    display: flex;\n    flex-wrap: wrap;\n`;\n\nfunction SideBar({ selectedItem }) {\n    const area = areas[selectedItem.area];\n    const itemCount = areaItemCount[selectedItem.area];\n    let areaItem = 0;\n    const zoneItem = [];\n    let mandatoryCount = 0;\n    let leftoverCount = 0;\n\n    for (const box of boxes) {\n        if (box.area !== selectedItem.area) continue;\n        areaItem += box.quantity;\n\n        zoneItem[box.zone] = (zoneItem[box.zone] || 0) + box.quantity;\n    }\n\n    for (const item in itemCount) {\n        const quantity = itemCount[item];\n\n        mandatoryCount += Math.floor(quantity / 5);\n        leftoverCount += quantity % 5;\n    }\n\n    const zoneLeftovers = zoneItem.map((zone, index) => {\n        if (index === 0) return zone;\n        return zone - mandatoryCount;\n    });\n\n    const zoneName = selectedItem.zone\n        ? `Zone ${selectedItem.zone}`\n        : `Zoneless`;\n\n    return (\n        <SidebarBox>\n            <Header>ERBS Map</Header>\n            {selectedItem.area && (\n                <>\n                    <Subtitle>{area.englishName}</Subtitle>\n                    <Text>Items: {areaItem}</Text>\n                    <ItemHolderBox>\n                        {Object.keys(itemCount).map((item) => {\n                            const count = itemCount[item];\n\n                            return <BserItem item={item} quantity={count} />;\n                        })}\n                    </ItemHolderBox>\n                    <Text>Items per zone: {mandatoryCount}</Text>\n                    <ItemHolderBox>\n                        {Object.keys(itemCount).map((item) => {\n                            const count = Math.floor(itemCount[item] / 5);\n\n                            if (count === 0) return <></>;\n\n                            return <BserItem item={item} quantity={count} />;\n                        })}\n                    </ItemHolderBox>\n                    <Text>Leftovers: {leftoverCount}</Text>\n                    <ItemHolderBox>\n                        {Object.keys(itemCount).map((item) => {\n                            const count = itemCount[item] % 5;\n\n                            if (count === 0) return <></>;\n\n                            return <BserItem item={item} quantity={count} />;\n                        })}\n                    </ItemHolderBox>\n                    <Subtitle>{zoneName}</Subtitle>\n                    <Text>Total Items: {zoneItem[selectedItem.zone]}</Text>\n                    <Text>Extras: {zoneLeftovers[selectedItem.zone]}</Text>\n                    <ItemHolderBox>\n                        {Object.keys(itemCount).map((item) => {\n                            const count = itemCount[item] % 5;\n\n                            if (count === 0) return <></>;\n\n                            const chance = (\n                                1 -\n                                cdf(\n                                    1.0,\n                                    leftoverCount,\n                                    count,\n                                    zoneLeftovers[selectedItem.zone]\n                                ) +\n                                pmf(\n                                    1.0,\n                                    leftoverCount,\n                                    count,\n                                    zoneLeftovers[selectedItem.zone]\n                                )\n                            ).toFixed(2);\n\n                            return (\n                                <div>\n                                    <BserItem item={item} />\n                                    <Text>{chance}</Text>\n                                </div>\n                            );\n                        })}\n                    </ItemHolderBox>\n                </>\n            )}\n        </SidebarBox>\n    );\n}\n\nexport default SideBar;\n","import SideBar from \"./SideBar\";\nexport default SideBar;\n","import styled from \"styled-components\";\nimport { MapInteractionCSS } from \"react-map-interaction\";\nimport boxes from \"../../data/boxes.json\";\n\nconst zoneColors = {\n    0: \"hsl(0,0%, 75%)\",\n    1: \"hsl(0, 100%, 50%)\",\n    2: \"hsl(55, 100%, 50%)\",\n    3: \"hsl(120, 100%, 50%)\",\n    4: \"hsl(200, 100%, 50%)\",\n    5: \"hsl(304, 100%, 50%)\",\n};\n\nconst StyledSvg = styled.svg`\n    width: 100%;\n    height: calc(100vh - 4px);\n`;\n\nconst StyledText = styled.text`\n    fill: ${({ zone }) => zoneColors[zone]};\n    font-size: 10px;\n    font-family: Trebuchet MS, Lucida Grande, Lucida Sans Unicode, Lucida Sans,\n        Tahoma, sans-serif;\n    cursor: pointer;\n`;\n\nfunction BserMap({ setSelectedItem }) {\n    return (\n        <MapInteractionCSS maxScale={10} minScale={0.95} showControls={true}>\n            <StyledSvg\n                xmlns=\"http://www.w3.org/2000/svg\"\n                xmlnsXlink=\"http://www.w3.org/1999/xlink\"\n                viewBox=\"0 0 772 887\"\n            >\n                <title>ZoneMapping</title>\n                <g id=\"Layer_1\" data-name=\"Layer 1\">\n                    <image\n                        width=\"772\"\n                        height=\"887\"\n                        xlinkHref={process.env.PUBLIC_URL + \"/MiniMap_01.png\"}\n                    />\n                </g>\n                {boxes.map((box) => (\n                    <StyledText\n                        transform={`translate(${box.coords[0]} ${box.coords[1]} )`}\n                        zone={box.zone}\n                        onClick={() => {\n                            setSelectedItem(box);\n                        }}\n                    >\n                        {box.quantity}\n                    </StyledText>\n                ))}\n            </StyledSvg>\n        </MapInteractionCSS>\n    );\n}\n\nexport default BserMap;\n","import BserMap from \"./BserMap\";\nexport default BserMap;\n","import SideBar from \"../SideBar\";\nimport BserMap from \"../BserMap\";\nimport styled from \"styled-components\";\nimport { useState } from \"react\";\n\nconst Wrapper = styled.div`\n    display: flex;\n    text-align: center;\n`;\n\nfunction MapSideBarWrapper() {\n    const [selectedItem, setSelectedItem] = useState({});\n\n    return (\n        <Wrapper>\n            <BserMap\n                selectedItem={selectedItem}\n                setSelectedItem={setSelectedItem}\n            />\n            <SideBar selectedItem={selectedItem} />\n        </Wrapper>\n    );\n}\n\nexport default MapSideBarWrapper;\n","import MapSideBarWrapper from \"./MapSideBarWrapper\";\nexport default MapSideBarWrapper;\n","import styled from \"styled-components\";\nimport MapSideBarWrapper from \"./components/MapSideBarWrapper\";\n\nconst Background = styled.div`\n    background-color: hsl(0, 0%, 17.5%);\n`;\n\nfunction App() {\n    return (\n        <Background>\n            <MapSideBarWrapper />\n        </Background>\n    );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}