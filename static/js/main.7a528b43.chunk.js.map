{"version":3,"sources":["components/BserItem/BserItem.jsx","components/Modal/Modal.jsx","components/Modal/index.jsx","utils/device.js","components/UpdateHistory/UpdateHistory.jsx","components/UpdateHistory/index.jsx","components/Context/SettingsContext.jsx","components/SettingsBox/SettingsBox.jsx","components/SettingsBox/index.jsx","enums/itemTypes.js","components/BserMap/BserMap.jsx","components/SideBar/SideBar.jsx","components/SideBar/index.jsx","components/BserMap/index.jsx","components/MapSideBarWrapper/MapSideBarWrapper.jsx","components/MapSideBarWrapper/index.jsx","App.js","reportWebVitals.js","index.js"],"names":["GradeColor","Common","fill","StyledImg","styled","img","grade","border","AltTextFontWrapper","span","ItemBackground","div","size","ImageColorBackground","focus","theme","colors","secondary","Item","QuantityText","BserItem","item","quantity","itemName","codeToName","imgSrc","process","arrow","content","src","alt","StyledModal","Overlay","Modal","open","children","onClose","ReactDom","createPortal","onClick","document","getElementById","device","mobileS","mobileM","mobileL","tablet","laptop","laptopL","desktop","desktopL","mobileSMax","mobileMMax","mobileLMax","tabletMax","laptopMax","laptopLMax","desktopMax","desktopLMax","HistoryBox","HistoryTitle","h2","ChangeDate","ChangesList","ul","ChangesListItem","li","historyData","date","changes","UpdateHistory","map","change","SettingsContext","createContext","SettingsProvider","useState","color","state","numbers","animals","spawns","collectables","boxes","supplies","settings","setSettings","Provider","value","toggleSetting","setting","index","oldSettings","newState","Object","keys","forEach","key","some","SettingBox","CheckboxWithText","CheckboxText","p","NestedCheckboxes","Checkbox","input","SettingTitle","h1","Minus","AiOutlineMinus","Expand","AiOutlineExpandAlt","SettingsTitleContainer","CheckBoxContainer","CheckboxRightArrow","AiOutlineRight","CheckboxDownArrow","AiOutlineDown","CheckboxArrow","active","SettingsBox","useContext","collectablesExpanded","setCollectablesExpanded","animalsExpanded","setAnimalsExpanded","isMinimized","setIsMinimized","type","checked","readOnly","e","stopPropagation","collectable","animal","animalName","itemTypes","zoneColors","StyledSvg","svg","StyledText","text","isColorEnabled","zone","StyledCircle","circle","isBorderColorEnabled","StyledImage","image","MapDiv","Credits","HistoryText","CreditsBox","CreditLink","a","BserMap","setSelectedItem","isCreditsOpen","setIsCreditsOpen","isHistoryOpen","setIsHistoryOpen","svgRef","useRef","href","target","rel","maxScale","minScale","showControls","xmlns","xmlnsXlink","viewBox","ref","event","cursorPoint","current","createSVGPoint","x","clientX","y","clientY","matrixTransform","getScreenCTM","inverse","Math","round","id","width","height","xlinkHref","supply","rarity","parseFloat","coords","onTouchEnd","filter","code","area","spawn","cx","cy","r","box","transform","SidebarBox","Header","Text","fontWeight","Subtitle","ItemHolderBox","ItemWithPercentages","alignItems","SubSubTitle","h3","SubSubtitleWithQuestionTooltip","QuestionTooltip","AiOutlineQuestionCircle","Info","CreateSideBarSection","selectedItem","areas","itemCount","areaItemCount","areaItem","zoneItem","mandatoryCount","leftoverCount","floor","zoneLeftovers","zoneName","englishName","count","mandatory","chances","currentExtra","chance","cdf","pmf","toFixed","animalToGroups","group","groupName","animalDropChance","probability","supplyToGroups","HeaderBox","QuestionIcon","HelpModalDiv","CloseButton","AiOutlineClose","HelpTitle","borderRadius","margin","maxWidth","HelpSubTitle","Paragraph","HelpBoxes","StyledLink","HelpModal","SideBar","isHelpOpened","setHelpOpened","Wrapper","MapSideBarWrapper","setSelectedItemState","Background","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.7a528b43.chunk.js","sourcesContent":["import styled from \"styled-components\";\nimport codeToName from \"../../data/codeToName.json\";\nimport Tippy from \"@tippyjs/react\";\n\nconst GradeColor = {\n    Common: {\n        fill: \"linear-gradient(hsla(0, 0%, 50%, 1), hsla(0, 0%, 60%, 1))\",\n    },\n};\n\nconst StyledImg = styled.img`\n    height: 100%;\n    /* filter: drop-shadow(1px 1px 0 ${({ grade }) => GradeColor[grade].border})\n        drop-shadow(-1px 1px 0 ${({ grade }) => GradeColor[grade].border})\n        drop-shadow(1px -1px 0 ${({ grade }) => GradeColor[grade].border})\n        drop-shadow(-0.1px -0.1px 0 ${({ grade }) =>\n        GradeColor[grade].border}); */\n`;\n\nconst AltTextFontWrapper = styled.span`\n    height: 100%;\n    font-size: 0.6rem;\n`;\n\nconst ItemBackground = styled.div`\n    border-radius: 1px;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    padding: 2px;\n    border-radius: 3px;\n    margin: 0.1rem;\n    height: ${({ size }) => (size === \"small\" ? \"1.5rem\" : \"2rem\")};\n    width: ${({ size }) => (size === \"small\" ? \"2.7rem\" : \"3.6rem\")};\n`;\n\nconst ImageColorBackground = styled(ItemBackground)`\n    background: ${({ grade }) => GradeColor[grade].fill};\n    position: relative;\n    /* border: ${({ grade }) => GradeColor[grade].border} solid 2px; */\n    /* border-radius: 3px; */\n    background-clip: padding-box;\n    border: ${({ focus, theme }) =>\n        focus ? `${theme.colors.secondary} 2px solid` : `transparent`};\n`;\n\nconst Item = styled.div`\n    display: flex;\n    align-items: center;\n    justify-content: center;\n`;\n\nconst QuantityText = styled.div`\n    position: absolute;\n    bottom: 0;\n    right: 0;\n    background-color: hsl(0, 0%, 17.5%);\n    color: hsl(0, 0%, 87%);\n    padding: 0 0.2rem;\n    font-size: 0.9rem;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    border-radius: 3px;\n`;\n\nfunction BserItem({ item, quantity, size }) {\n    let itemName = codeToName[item];\n\n    let imgSrc = process.env.PUBLIC_URL + \"/images/items/\" + item + \".png\";\n\n    return (\n        <Tippy arrow={true} content={<span>{itemName}</span>}>\n            <Item>\n                <ImageColorBackground grade={\"Common\"} size={size}>\n                    <AltTextFontWrapper>\n                        <StyledImg\n                            grade={\"Common\"}\n                            src={imgSrc}\n                            alt={itemName}\n                        />\n                    </AltTextFontWrapper>\n                    {quantity && <QuantityText>{quantity}</QuantityText>}\n                </ImageColorBackground>\n            </Item>\n        </Tippy>\n    );\n}\n\nexport default BserItem;\n","import ReactDom from \"react-dom\";\nimport styled from \"styled-components\";\n\nconst StyledModal = styled.div`\n    position: fixed;\n    top: 50%;\n    left: 50%;\n    transform: translate(-50%, -50%);\n    z-index: 1000;\n`;\n\nconst Overlay = styled.div`\n    position: fixed;\n    top: 0;\n    left: 0;\n    right: 0;\n    bottom: 0;\n    background-color: hsla(0, 0%, 0%, 0.3);\n    z-index: 1000;\n`;\n\nexport default function Modal({ open, children, onClose }) {\n    if (!open) return null;\n\n    return ReactDom.createPortal(\n        <>\n            <Overlay onClick={onClose} />\n            <StyledModal>{children}</StyledModal>\n        </>,\n        document.getElementById(\"root\")\n    );\n}\n","import Modal from \"./Modal\";\nexport default Modal;\n","export const size = {\n    mobileS: \"320px\",\n    mobileM: \"375px\",\n    mobileL: \"425px\",\n    tablet: \"768px\",\n    laptop: \"1024px\",\n    laptopL: \"1440px\",\n    desktop: \"2560px\",\n};\n\nexport const device = {\n    mobileS: `(min-width: ${size.mobileS})`,\n    mobileM: `(min-width: ${size.mobileM})`,\n    mobileL: `(min-width: ${size.mobileL})`,\n    tablet: `(min-width: ${size.tablet})`,\n    laptop: `(min-width: ${size.laptop})`,\n    laptopL: `(min-width: ${size.laptopL})`,\n    desktop: `(min-width: ${size.desktop})`,\n    desktopL: `(min-width: ${size.desktop})`,\n    mobileSMax: `(max-width: ${size.mobileS})`,\n    mobileMMax: `(max-width: ${size.mobileM})`,\n    mobileLMax: `(max-width: ${size.mobileL})`,\n    tabletMax: `(max-width: ${size.tablet})`,\n    laptopMax: `(max-width: ${size.laptop})`,\n    laptopLMax: `(max-width: ${size.laptopL})`,\n    desktopMax: `(max-width: ${size.desktop})`,\n    desktopLMax: `(max-width: ${size.desktop})`,\n};\n","import styled from \"styled-components\";\n\nconst HistoryBox = styled.div`\n    width: 40rem;\n    max-width: 90vw;\n    padding: 2rem;\n    border-radius: 0.5rem;\n    background-color: hsl(240, 5%, 30%);\n    color: hsl(0, 0%, 87%);\n    display: flex;\n    flex-direction: column;\n    gap: 0.5rem;\n    max-height: 80vh;\n    overflow-y: auto;\n`;\n\nconst HistoryTitle = styled.h2`\n    font-size: 1.5rem;\n`;\n\nconst ChangeDate = styled.div`\n    font-weight: 700;\n`;\n\nconst ChangesList = styled.ul`\n    margin-bottom: 1rem;\n`;\n\nconst ChangesListItem = styled.li`\n    margin-left: 1rem;\n`;\n\nconst historyData = [\n    {\n        date: \"2022/02/03\",\n        changes: [\n            \"Updated to Patch 0.51.0\",\n            \"Updated With Season 5 Official Loot distributions\",\n        ],\n    },\n    {\n        date: \"2022/01/28\",\n        changes: [\n            \"Updated to Patch 0.50.0\",\n            \"Updated With Official Loot distributions\",\n            \"Fixed spawn locations in certain areas\",\n            \"Added new Meteorite spawns\",\n            \"Added Supply crate drop rates\",\n        ],\n    },\n    {\n        date: \"2021/12/29\",\n        changes: [\"Updated to Patch 0.48.0\"],\n    },\n    {\n        date: \"2021/11/25\",\n        changes: [\n            \"Updated to Patch 0.46.0\",\n            \"Updated drop chances of Bears\",\n            \"Updated animal locations for New Alpha/Omega Spawns\",\n            \"Added Help Guide\",\n        ],\n    },\n    {\n        date: \"2021/11/15\",\n        changes: [\n            \"Updated layout for tablet sizes\",\n            \"Fixed arrow expanding issues\",\n        ],\n    },\n    {\n        date: \"2021/11/14\",\n        changes: [\n            \"Updated to Patch 0.45.0\",\n            \"Added Collectables and Spawns\",\n            \"Added nested toggles for Animals and Collectables\",\n            \"Added Animal drop chances\",\n            \"Added tooltip to item hovering\",\n        ],\n    },\n    {\n        date: \"2021/11/06\",\n        changes: [\n            \"Updated to Patch 0.44.0\",\n            \"Fixed School and Forest Loot Maps\",\n            \"Added Animals Toggle\",\n            \"Removed Color and number toggles\",\n        ],\n    },\n    {\n        date: \"2021/09/30\",\n        changes: [\"Updated to Patch 0.42.0\"],\n    },\n    {\n        date: \"2021/09/16\",\n        changes: [\"Updated to Patch 0.41.0\"],\n    },\n    {\n        date: \"2021/09/08\",\n        changes: [\"Changed percentage calculations\"],\n    },\n    {\n        date: \"2021/09/04\",\n        changes: [\n            \"Fixed Bandage/Coffee/Garlic images\",\n            \"Added new boxes for Temple + Dock\",\n            \"Changed Zoning for Archery Range\",\n        ],\n    },\n    {\n        date: \"2021/08\",\n        changes: [\"Created ERBS Loot Map\"],\n    },\n];\n\nfunction UpdateHistory() {\n    return (\n        <HistoryBox>\n            <HistoryTitle>Update History</HistoryTitle>\n            {historyData.map(({ date, changes }) => (\n                <>\n                    <ChangeDate key={date}>{date}</ChangeDate>\n                    <ChangesList>\n                        {changes.map((change) => (\n                            <ChangesListItem>{change}</ChangesListItem>\n                        ))}\n                    </ChangesList>\n                </>\n            ))}\n        </HistoryBox>\n    );\n}\n\nexport default UpdateHistory;\n","import UpdateHistory from \"./UpdateHistory\";\nexport default UpdateHistory;\n","import { createContext, useState } from \"react\";\n\nconst SettingsContext = createContext(null);\n\nexport const SettingsProvider = ({ children }) => {\n    const [settings, setSettings] = useState({\n        color: {\n            state: true,\n        },\n        numbers: {\n            state: true,\n        },\n        animals: {\n            state: false,\n            1: false,\n            2: false,\n            3: false,\n            4: false,\n            5: false,\n            6: false,\n            7: false,\n            8: false,\n        },\n        spawns: {\n            state: true,\n        },\n        collectables: {\n            state: false,\n            301109: false,\n            302102: false,\n            301104: false,\n            301102: false,\n            401209: false,\n            401208: false,\n        },\n        boxes: {\n            state: true,\n        },\n        supplies: {\n            state: true,\n        },\n    });\n\n    const toggleSetting = (setting, index) => {\n        if (index === \"state\") {\n            let oldSettings = settings[setting];\n            let newState = !settings[setting].state;\n            Object.keys(oldSettings).forEach((key) => {\n                oldSettings[key] = newState;\n            });\n            setSettings({\n                ...settings,\n                [setting]: oldSettings,\n            });\n        } else {\n            let state =\n                !settings[setting][index] ||\n                Object.keys(settings[setting]).some((key) => {\n                    if (key !== \"state\" && key !== index) {\n                        return settings[setting][key];\n                    }\n                    return false;\n                });\n            setSettings({\n                ...settings,\n                [setting]: {\n                    ...settings[setting],\n                    [index]: !settings[setting][index],\n                    state: state,\n                },\n            });\n        }\n    };\n\n    return (\n        <SettingsContext.Provider\n            value={{\n                settings,\n                toggleSetting,\n            }}\n        >\n            {children}\n        </SettingsContext.Provider>\n    );\n};\n\nexport default SettingsContext;\n","import styled from \"styled-components\";\nimport SettingsContext from \"../Context/SettingsContext\";\nimport { useContext, useState } from \"react\";\nimport codeToName from \"../../data/codeToName.json\";\nimport {\n    AiOutlineRight,\n    AiOutlineDown,\n    AiOutlineMinus,\n    AiOutlineExpandAlt,\n} from \"react-icons/ai\";\nimport animalName from \"../../data/animalName.json\";\n\nconst SettingBox = styled.div`\n    position: absolute;\n    right: 1rem;\n    bottom: 1rem;\n    background-color: hsl(240, 5%, 30%);\n    color: hsl(0, 0%, 87%);\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    border-radius: 0.25rem;\n    z-index: 2;\n    min-width: 150px;\n`;\n\nconst CheckboxWithText = styled.div`\n    display: flex;\n    align-items: center;\n    position: relative;\n`;\n\nconst CheckboxText = styled.p`\n    margin-left: 0.25rem;\n    -webkit-user-select: none;\n    -moz-user-select: none;\n    -ms-user-select: none;\n    user-select: none;\n    cursor: pointer;\n`;\n\nconst NestedCheckboxes = styled.div`\n    margin-left: 1rem;\n`;\n\nconst Checkbox = styled.input`\n    cursor: pointer;\n`;\n\nconst SettingTitle = styled.h1`\n    font-size: 1rem;\n    text-align: start;\n`;\n\nconst Minus = styled(AiOutlineMinus)`\n    &:hover {\n    }\n`;\n\nconst Expand = styled(AiOutlineExpandAlt)``;\n\nconst SettingsTitleContainer = styled.div`\n    display: flex;\n    align-items: center;\n    justify-content: space-between;\n    padding: 5px 5px;\n    border-bottom: 1px solid hsl(0, 0%, 60%);\n`;\n\nconst CheckBoxContainer = styled.div`\n    padding: 0.5rem 1.4rem;\n`;\n\nfunction SettingsBox() {\n    const { settings, toggleSetting } = useContext(SettingsContext);\n\n    const [collectablesExpanded, setCollectablesExpanded] = useState(false);\n    const [animalsExpanded, setAnimalsExpanded] = useState(false);\n    const [isMinimized, setIsMinimized] = useState(false);\n\n    return (\n        <SettingBox>\n            <SettingsTitleContainer>\n                <SettingTitle>Settings</SettingTitle>\n                {isMinimized ? (\n                    <Expand\n                        onClick={() => {\n                            setIsMinimized(false);\n                        }}\n                    />\n                ) : (\n                    <Minus\n                        onClick={() => {\n                            setIsMinimized(true);\n                        }}\n                    />\n                )}\n            </SettingsTitleContainer>\n\n            {!isMinimized && (\n                <CheckBoxContainer>\n                    <CheckboxWithText\n                        onClick={() => toggleSetting(\"supplies\", \"state\")}\n                    >\n                        <Checkbox\n                            type=\"checkbox\"\n                            checked={settings.supplies.state}\n                            readOnly={true}\n                        ></Checkbox>\n                        <CheckboxText>Supplies</CheckboxText>\n                    </CheckboxWithText>\n                    <CheckboxWithText\n                        onClick={() => {\n                            toggleSetting(\"collectables\", \"state\");\n                        }}\n                    >\n                        <Checkbox\n                            type=\"checkbox\"\n                            checked={settings.collectables.state}\n                            readOnly={true}\n                        ></Checkbox>\n                        <CheckboxArrow\n                            active={collectablesExpanded}\n                            onClick={(e) => {\n                                e.stopPropagation();\n                                setCollectablesExpanded(!collectablesExpanded);\n                            }}\n                        />\n                        <CheckboxText>Collectables</CheckboxText>\n                    </CheckboxWithText>\n                    {collectablesExpanded && (\n                        <NestedCheckboxes>\n                            {[\n                                \"301109\",\n                                \"302102\",\n                                \"301104\",\n                                \"301102\",\n                                \"401209\",\n                                \"401208\",\n                            ].map((collectable) => (\n                                <CheckboxWithText\n                                    key={collectable}\n                                    onClick={() => {\n                                        toggleSetting(\n                                            \"collectables\",\n                                            collectable\n                                        );\n                                    }}\n                                >\n                                    <Checkbox\n                                        type=\"checkbox\"\n                                        checked={\n                                            settings.collectables[collectable]\n                                        }\n                                        readOnly={true}\n                                    ></Checkbox>\n                                    <CheckboxText>\n                                        {codeToName[collectable]}\n                                    </CheckboxText>\n                                </CheckboxWithText>\n                            ))}\n                        </NestedCheckboxes>\n                    )}\n\n                    <CheckboxWithText\n                        onClick={() => toggleSetting(\"spawns\", \"state\")}\n                    >\n                        <Checkbox\n                            type=\"checkbox\"\n                            checked={settings.spawns.state}\n                            readOnly={true}\n                        ></Checkbox>\n                        <CheckboxText>Spawns</CheckboxText>\n                    </CheckboxWithText>\n                    <CheckboxWithText\n                        onClick={() => toggleSetting(\"animals\", \"state\")}\n                    >\n                        <Checkbox\n                            type=\"checkbox\"\n                            checked={settings.animals.state}\n                            readOnly={true}\n                        ></Checkbox>\n                        <CheckboxArrow\n                            active={animalsExpanded}\n                            onClick={(e) => {\n                                e.stopPropagation();\n                                setAnimalsExpanded(!animalsExpanded);\n                            }}\n                        />\n                        <CheckboxText>Animals</CheckboxText>\n                    </CheckboxWithText>\n                    {animalsExpanded && (\n                        <NestedCheckboxes>\n                            {[\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\"].map(\n                                (animal) => (\n                                    <CheckboxWithText\n                                        key={animal}\n                                        onClick={() =>\n                                            toggleSetting(\"animals\", animal)\n                                        }\n                                    >\n                                        <Checkbox\n                                            type=\"checkbox\"\n                                            checked={settings.animals[animal]}\n                                            readOnly={true}\n                                        ></Checkbox>\n                                        <CheckboxText>\n                                            {animalName[animal]}\n                                        </CheckboxText>\n                                    </CheckboxWithText>\n                                )\n                            )}\n                        </NestedCheckboxes>\n                    )}\n                    <CheckboxWithText\n                        onClick={() => toggleSetting(\"boxes\", \"state\")}\n                    >\n                        <Checkbox\n                            type=\"checkbox\"\n                            checked={settings.boxes.state}\n                            readOnly={true}\n                        ></Checkbox>\n                        <CheckboxText>Boxes</CheckboxText>\n                    </CheckboxWithText>\n                    {/* <CheckboxWithText>\n            <Checkbox\n                type=\"checkbox\"\n                checked={settings.numbers}\n                onChange={toggleNumbers}\n            ></Checkbox>\n            <CheckboxText>Numbers</CheckboxText>\n            </CheckboxWithText>\n            <CheckboxWithText>\n                <Checkbox\n                    type=\"checkbox\"\n                    checked={settings.color}\n                    onChange={toggleColor}\n                ></Checkbox>\n                <CheckboxText>Colors</CheckboxText>\n            </CheckboxWithText> */}\n                </CheckBoxContainer>\n            )}\n        </SettingBox>\n    );\n}\n\nconst CheckboxRightArrow = styled(AiOutlineRight)`\n    position: absolute;\n    left: -20px;\n    width: 20px;\n    height: 1rem;\n`;\n\nconst CheckboxDownArrow = styled(AiOutlineDown)`\n    position: absolute;\n    left: -20px;\n    width: 20px;\n    height: 1rem;\n`;\n\nfunction CheckboxArrow({ active, onClick }) {\n    return active ? (\n        <CheckboxDownArrow onClick={onClick} />\n    ) : (\n        <CheckboxRightArrow onClick={onClick} />\n    );\n}\n\nexport default SettingsBox;\n","import SettingsBox from \"./SettingsBox\";\n\nexport default SettingsBox;\n","export const itemTypes = {\n    BOXES: \"boxes\",\n    SPAWNS: \"spawns\",\n    COLLECTABLES: \"collectables\",\n    ANIMALS: \"animals\",\n    SUPPLIES: \"supplies\",\n};\n","import styled from \"styled-components\";\nimport { MapInteractionCSS } from \"react-map-interaction\";\nimport boxes from \"../../data/boxes.json\";\nimport animals from \"../../data/animals.json\";\nimport spawns from \"../../data/spawns.json\";\nimport collectables from \"../../data/collectables.json\";\nimport supplies from \"../../data/supplies.json\";\nimport { useState, useContext, useRef } from \"react\";\nimport Modal from \"../Modal\";\nimport { device } from \"../../utils/device\";\nimport UpdateHistory from \"../UpdateHistory\";\nimport SettingsContext from \"../Context/SettingsContext\";\nimport SettingsBox from \"../SettingsBox\";\nimport { itemTypes } from \"../../enums/itemTypes\";\n\nexport const zoneColors = {\n    0: \"hsl(0,0%, 85%)\",\n    1: \"hsl(200, 100%, 45%)\",\n    2: \"hsl(120, 100%, 45%)\",\n    3: \"hsl(0, 100%, 45%)\",\n    4: \"hsl(304, 100%, 45%)\",\n    5: \"hsl(55, 100%, 45%)\",\n};\n\nconst StyledSvg = styled.svg`\n    width: 100%;\n    height: calc(100vh - 4px);\n    @media ${device.tabletMax} {\n        height: calc(60vh - 4px);\n    }\n`;\n\nconst StyledText = styled.text`\n    fill: ${({ isColorEnabled, zone }) =>\n        isColorEnabled ? zoneColors[zone] : \"hsl(0, 0%, 75%)\"};\n    font-size: 10px;\n    font-family: Trebuchet MS, Lucida Grande, Lucida Sans Unicode, Lucida Sans,\n        Tahoma, sans-serif;\n    cursor: pointer;\n`;\n\nconst StyledCircle = styled.circle`\n    fill: ${({ isColorEnabled, zone }) =>\n        isColorEnabled ? zoneColors[zone] : \"hsl(0, 0%, 0%)\"};\n    cursor: pointer;\n    stroke-width: 0.2px;\n    stroke: ${({ isBorderColorEnabled, zone }) =>\n        isBorderColorEnabled ? zoneColors[zone] : \"hsl(0, 0%, 25%)\"};\n`;\n\nconst StyledImage = styled.image`\n    cursor: pointer;\n`;\n\nconst MapDiv = styled.div`\n    position: relative;\n    flex-grow: 1;\n`;\n\nconst Credits = styled.div`\n    position: absolute;\n    color: hsl(0, 0%, 67%);\n    left: 0.5rem;\n    cursor: pointer;\n    z-index: 2;\n    bottom: 0.5rem;\n    :hover {\n        color: hsl(0, 0%, 87%);\n    }\n`;\n\nconst HistoryText = styled(Credits)`\n    top: 0.5rem;\n    bottom: auto;\n`;\n\nconst CreditsBox = styled.div`\n    width: 40rem;\n    max-width: 90vw;\n    padding: 2rem;\n    border-radius: 0.5rem;\n    background-color: hsl(240, 5%, 30%);\n    color: hsl(0, 0%, 87%);\n    display: flex;\n    flex-direction: column;\n    gap: 0.5rem;\n`;\n\nconst CreditLink = styled.a`\n    color: hsl(0, 0%, 87%);\n`;\n\nfunction BserMap({ setSelectedItem }) {\n    const { settings } = useContext(SettingsContext);\n\n    const [isCreditsOpen, setIsCreditsOpen] = useState(false);\n    const [isHistoryOpen, setIsHistoryOpen] = useState(false);\n\n    const svgRef = useRef(null);\n\n    const getCursorPoint = (event) => {\n        let cursorPoint = svgRef.current.createSVGPoint();\n        cursorPoint.x = event.clientX;\n        cursorPoint.y = event.clientY;\n        cursorPoint = cursorPoint.matrixTransform(\n            svgRef.current.getScreenCTM().inverse()\n        );\n        cursorPoint.x = Math.round(cursorPoint.x);\n        cursorPoint.y = Math.round(cursorPoint.y);\n\n        //For Dev purposes only\n        // console.log(cursorPoint);\n\n        return cursorPoint;\n    };\n\n    return (\n        <MapDiv>\n            <Modal open={isCreditsOpen} onClose={() => setIsCreditsOpen(false)}>\n                <CreditsBox>\n                    <h3>Original Map Data Source</h3>\n                    <CreditLink\n                        href=\"https://media.discordapp.net/attachments/854879257549340680/879299030952316988/ClusterMap.png\"\n                        target=\"_blank\"\n                        rel=\"noopener noreferrer\"\n                    >\n                        Open Image\n                    </CreditLink>\n                    <p>\n                        Special thanks to the contributers: Wraith, Zorceress,\n                        Silvrr, LilyDango, KamLauBak, and YeetandSkeet\n                    </p>\n                    <h3>Created By MacTal</h3>\n                    <p>\n                        For suggestions or corrections, feel free to contact\n                        TheAsianLife#2560 on discord\n                    </p>\n                </CreditsBox>\n            </Modal>\n            <Modal open={isHistoryOpen} onClose={() => setIsHistoryOpen(false)}>\n                <UpdateHistory />\n            </Modal>\n            <SettingsBox />\n            <Credits onClick={() => setIsCreditsOpen(true)}>Credits</Credits>\n            <HistoryText onClick={() => setIsHistoryOpen(true)}>\n                Last Updated: Patch 0.51.0\n            </HistoryText>\n            <MapInteractionCSS maxScale={6} minScale={0.95} showControls={true}>\n                <StyledSvg\n                    xmlns=\"https://www.w3.org/2000/svg\"\n                    xmlnsXlink=\"https://www.w3.org/1999/xlink\"\n                    viewBox=\"0 0 772 887\"\n                    ref={svgRef}\n                    onClick={getCursorPoint}\n                >\n                    <g id=\"Layer_1\" data-name=\"Layer 1\">\n                        <image\n                            width=\"772\"\n                            height=\"887\"\n                            xlinkHref={\n                                process.env.PUBLIC_URL + \"/MiniMap_01.png\"\n                            }\n                        />\n                    </g>\n                    {settings.supplies.state &&\n                        supplies.map((supply) => (\n                            <StyledImage\n                                key={supply.rarity}\n                                xlinkHref={\n                                    process.env.PUBLIC_URL +\n                                    `/images/supplies/${supply.rarity}.png`\n                                }\n                                x={parseFloat(supply.coords[0]) - 20 / 2}\n                                y={parseFloat(supply.coords[1]) - 20 / 2}\n                                width={20}\n                                height={20}\n                                onClick={() => {\n                                    setSelectedItem(supply, itemTypes.SUPPLIES);\n                                }}\n                                onTouchEnd={() => {\n                                    setSelectedItem(supply, itemTypes.SUPPLIES);\n                                }}\n                            />\n                        ))}\n                    {settings.collectables.state &&\n                        collectables\n                            .filter(({ code }) => {\n                                return settings.collectables[code];\n                            })\n                            .map((collectable) => (\n                                <StyledImage\n                                    key={\n                                        collectable.code +\n                                        collectable.area +\n                                        collectable.coords[0] +\n                                        collectable.coords[1]\n                                    }\n                                    xlinkHref={\n                                        process.env.PUBLIC_URL +\n                                        `/images/items/${collectable.code}.png`\n                                    }\n                                    x={\n                                        parseFloat(collectable.coords[0]) -\n                                        15 / 2\n                                    }\n                                    y={\n                                        parseFloat(collectable.coords[1]) -\n                                        15 / 2\n                                    }\n                                    width={15}\n                                    height={15}\n                                    onClick={() => {\n                                        setSelectedItem(\n                                            collectable,\n                                            itemTypes.COLLECTABLES\n                                        );\n                                    }}\n                                    onTouchEnd={() => {\n                                        setSelectedItem(\n                                            collectable,\n                                            itemTypes.COLLECTABLES\n                                        );\n                                    }}\n                                />\n                            ))}\n                    {settings.spawns.state &&\n                        spawns.map((spawn) => (\n                            <StyledCircle\n                                key={\n                                    spawn.zone +\n                                    spawn.area +\n                                    spawn.coords[0] +\n                                    spawn.coords[1]\n                                }\n                                cx={parseFloat(spawn.coords[0])}\n                                cy={parseFloat(spawn.coords[1])}\n                                r=\"2.5\"\n                                zone={spawn.zone}\n                                isBorderColorEnabled={true}\n                                onClick={() => {\n                                    setSelectedItem(spawn, itemTypes.SPAWNS);\n                                }}\n                                onTouchEnd={() => {\n                                    setSelectedItem(spawn, itemTypes.SPAWNS);\n                                }}\n                            ></StyledCircle>\n                        ))}\n                    {settings.animals.state &&\n                        animals\n                            .filter(({ code }) => {\n                                return settings.animals[code];\n                            })\n                            .map((animal) => {\n                                return (\n                                    <StyledImage\n                                        key={\n                                            animal.code +\n                                            animal.area +\n                                            animal.coords[0] +\n                                            animal.coords[1]\n                                        }\n                                        xlinkHref={\n                                            process.env.PUBLIC_URL +\n                                            `/images/animals/${animal.code}.png`\n                                        }\n                                        x={\n                                            parseFloat(animal.coords[0]) -\n                                            25 / 2\n                                        }\n                                        y={\n                                            parseFloat(animal.coords[1]) -\n                                            25 / 2\n                                        }\n                                        width={25}\n                                        height={25}\n                                        onClick={() => {\n                                            setSelectedItem(\n                                                animal,\n                                                itemTypes.ANIMALS\n                                            );\n                                        }}\n                                        onTouchEnd={() => {\n                                            setSelectedItem(\n                                                animal,\n                                                itemTypes.ANIMALS\n                                            );\n                                        }}\n                                    />\n                                );\n                            })}\n                    {settings.boxes.state &&\n                        boxes.map((box) =>\n                            settings.numbers.state ? (\n                                <StyledText\n                                    key={\n                                        box.area +\n                                        box.zone +\n                                        box.coords[0] +\n                                        box.coords[1]\n                                    }\n                                    transform={`translate(${box.coords[0]} ${box.coords[1]} )`}\n                                    zone={box.zone}\n                                    isColorEnabled={settings.color.state}\n                                    onClick={() => {\n                                        setSelectedItem(box, itemTypes.BOXES);\n                                    }}\n                                    onTouchEnd={() => {\n                                        setSelectedItem(box, itemTypes.BOXES);\n                                    }}\n                                >\n                                    {box.quantity}\n                                </StyledText>\n                            ) : (\n                                <StyledCircle\n                                    key={\n                                        box.area +\n                                        box.zone +\n                                        box.coords[0] +\n                                        box.coords[1]\n                                    }\n                                    cx={parseFloat(box.coords[0]) + 3}\n                                    cy={parseFloat(box.coords[1]) - 3}\n                                    r=\"2.5\"\n                                    isColorEnabled={settings.color.state}\n                                    zone={box.zone}\n                                    onClick={() => {\n                                        setSelectedItem(box, itemTypes.BOXES);\n                                    }}\n                                    onTouchEnd={() => {\n                                        setSelectedItem(box, itemTypes.BOXES);\n                                    }}\n                                ></StyledCircle>\n                            )\n                        )}\n                </StyledSvg>\n            </MapInteractionCSS>\n        </MapDiv>\n    );\n}\n\nexport default BserMap;\n","import styled from \"styled-components\";\nimport areas from \"../../data/areas.json\";\nimport areaItemCount from \"../../data/areaItemCount.json\";\nimport BserItem from \"../BserItem/BserItem\";\nimport boxes from \"../../data/boxes.json\";\nimport cdf from \"@stdlib/stats-base-dists-hypergeometric-cdf\";\nimport pmf from \"@stdlib/stats-base-dists-hypergeometric-pmf\";\nimport { zoneColors } from \"../BserMap/BserMap\";\nimport Tippy from \"@tippyjs/react\";\nimport { AiOutlineQuestionCircle, AiOutlineClose } from \"react-icons/ai\";\nimport \"tippy.js/dist/tippy.css\";\nimport { device } from \"../../utils/device\";\nimport SettingsContext from \"../Context/SettingsContext\";\nimport { useContext, useState } from \"react\";\nimport { itemTypes } from \"../../enums/itemTypes\";\nimport animalName from \"../../data/animalName.json\";\nimport animalToGroups from \"../../data/animalToGroups.json\";\nimport animalDropChance from \"../../data/animalDropChance.json\";\nimport supplyToGroups from \"../../data/supplyToGroups.json\";\nimport codeToName from \"../../data/codeToName.json\";\nimport Modal from \"../Modal\";\n\nconst SidebarBox = styled.div`\n    width: 25%;\n    background-color: hsl(240, 5%, 30%);\n    display: flex;\n    position: relative;\n    padding: 0px 20px;\n    flex-direction: column;\n    align-items: start;\n    height: 100vh;\n    overflow-y: auto;\n    min-width: 16rem;\n\n    @media ${device.tabletMax} {\n        width: 100%;\n        height: 40vh;\n    }\n`;\n\nconst Header = styled.h1`\n    margin: 0.8rem 0px;\n    color: hsl(0, 0%, 87%);\n`;\n\nconst Text = styled.p`\n    font-size: 1rem;\n    margin: 0.2rem 0px;\n    color: ${({ color }) => (color ? color : \"hsl(0, 0%, 60%)\")};\n    font-weight: ${({ fontWeight }) => (fontWeight ? fontWeight : \"\")};\n`;\n\nconst Subtitle = styled.h2`\n    margin: 0.4rem 0px;\n    color: ${({ color }) => color || \"hsl(0, 0%,87%)\"};\n`;\n\nconst ItemHolderBox = styled.div`\n    margin-bottom: 0.2rem;\n    display: flex;\n    flex-wrap: wrap;\n`;\n\nconst ItemWithPercentages = styled.div`\n    display: flex;\n    flex-direction: column;\n    align-items: ${({ alignItems }) => (alignItems ? alignItems : \"start\")};\n`;\n\nconst SubSubTitle = styled.h3`\n    /* font-size: 0.8rem; */\n    color: hsl(0, 0%, 60%);\n`;\n\nconst SubSubtitleWithQuestionTooltip = styled.div`\n    margin: 0.4rem 0;\n    display: flex;\n    align-items: center;\n`;\n\nconst QuestionTooltip = styled(AiOutlineQuestionCircle)`\n    margin-left: 2px;\n    color: hsl(0, 0%, 60%);\n`;\n\nconst Info = styled.h3`\n    margin: 0.4rem 0px;\n    color: hsl(0, 0%, 87%);\n`;\n\nconst CreateSideBarSection = ({ selectedItem }) => {\n    const { settings } = useContext(SettingsContext);\n\n    if (selectedItem.type === itemTypes.BOXES) {\n        const area = areas[selectedItem.area];\n        const itemCount = areaItemCount[selectedItem.area];\n        let areaItem = 0;\n        const zoneItem = [];\n        let mandatoryCount = 0;\n        let leftoverCount = 0;\n\n        for (const box of boxes) {\n            if (box.area !== selectedItem.area) continue;\n            areaItem += box.quantity;\n\n            zoneItem[box.zone] = (zoneItem[box.zone] || 0) + box.quantity;\n        }\n\n        for (const item in itemCount) {\n            const quantity = itemCount[item];\n\n            mandatoryCount += Math.floor(quantity / 5);\n            leftoverCount += quantity % 5;\n        }\n\n        const zoneLeftovers = zoneItem.map((zone, index) => {\n            if (index === 0) return zone;\n            return zone - mandatoryCount;\n        });\n\n        const zoneName = selectedItem.zone\n            ? `Zone ${selectedItem.zone}`\n            : `Zoneless`;\n\n        return (\n            <>\n                <Subtitle>{area.englishName}</Subtitle>\n                <Text>Items: {areaItem}</Text>\n                <ItemHolderBox>\n                    {Object.keys(itemCount).map((item) => {\n                        const count = itemCount[item];\n\n                        return (\n                            <BserItem key={item} item={item} quantity={count} />\n                        );\n                    })}\n                </ItemHolderBox>\n                {/* <Text>Items per zone: {mandatoryCount}</Text>\n                    <ItemHolderBox>\n                        {Object.keys(itemCount).map((item) => {\n                            const count = Math.floor(itemCount[item] / 5);\n\n                            if (count === 0) return <></>;\n\n                            return <BserItem item={item} quantity={count} />;\n                        })}\n                    </ItemHolderBox>\n                    <Text>Leftovers: {leftoverCount}</Text>\n                    <ItemHolderBox>\n                        {Object.keys(itemCount).map((item) => {\n                            const count = itemCount[item] % 5;\n\n                            if (count === 0) return <></>;\n\n                            return <BserItem item={item} quantity={count} />;\n                        })}\n                    </ItemHolderBox> */}\n                <Subtitle\n                    color={\n                        settings.color.state\n                            ? zoneColors[selectedItem.zone]\n                            : null\n                    }\n                >\n                    {zoneName}\n                </Subtitle>\n                {/* <Subtitle>\n                    {selectedItem.coords[0] +\n                        \", \" +\n                        selectedItem.coords[1]}\n                </Subtitle> */}\n\n                {selectedItem.zone ? (\n                    <>\n                        <Text>\n                            Items in Zone: {zoneItem[selectedItem.zone]}\n                        </Text>\n                        <Text>Extras: {zoneLeftovers[selectedItem.zone]}</Text>\n\n                        <SubSubtitleWithQuestionTooltip>\n                            <SubSubTitle>Item Chance in Zone</SubSubTitle>\n                            <Tippy\n                                arrow={true}\n                                content={\n                                    <span>\n                                        All percentages are <b>estimates</b> due\n                                        to the complex nature of the boxes. They\n                                        are all <b>inaccurate</b> and should\n                                        only be used as an idea of what the\n                                        actual chance is\n                                    </span>\n                                }\n                            >\n                                <div>\n                                    <QuestionTooltip />\n                                </div>\n                            </Tippy>\n                        </SubSubtitleWithQuestionTooltip>\n\n                        <ItemHolderBox>\n                            {Object.keys(itemCount).map((item) => {\n                                const count = itemCount[item] % 5;\n\n                                const mandatory =\n                                    selectedItem.zone !== 0\n                                        ? Math.floor(itemCount[item] / 5)\n                                        : 0;\n\n                                const chances = {};\n\n                                if (mandatory > 0) chances[mandatory] = 100;\n\n                                let currentExtra = 0;\n\n                                while (true) {\n                                    currentExtra++;\n                                    const chance =\n                                        1 -\n                                        cdf(\n                                            currentExtra,\n                                            leftoverCount,\n                                            count,\n                                            zoneLeftovers[selectedItem.zone]\n                                        ) +\n                                        pmf(\n                                            currentExtra,\n                                            leftoverCount,\n                                            count,\n                                            zoneLeftovers[selectedItem.zone]\n                                        );\n\n                                    if (chance <= 0.01 || currentExtra >= 4)\n                                        break;\n\n                                    chances[currentExtra + mandatory] = (\n                                        chance * 100\n                                    ).toFixed(0);\n                                }\n\n                                return (\n                                    <ItemWithPercentages key={item}>\n                                        <BserItem item={item} />\n                                        {Object.keys(chances).map(\n                                            (quantity) => {\n                                                return (\n                                                    <Text key={quantity}>\n                                                        {quantity}:\n                                                        {chances[quantity]}%\n                                                    </Text>\n                                                );\n                                            }\n                                        )}\n                                    </ItemWithPercentages>\n                                );\n                            })}\n                        </ItemHolderBox>\n                    </>\n                ) : (\n                    <>\n                        <Text>Leftovers: {zoneItem[selectedItem.zone]}</Text>\n                        <SubSubtitleWithQuestionTooltip>\n                            <SubSubTitle>\n                                Item Chance in Selected Box\n                            </SubSubTitle>\n                            <Tippy\n                                arrow={true}\n                                content={\n                                    <span>\n                                        All percentages are <b>estimates</b> due\n                                        to the complex nature of the boxes.\n                                        Expect the chance to be higher than\n                                        listed.\n                                    </span>\n                                }\n                            >\n                                <div>\n                                    <QuestionTooltip />\n                                </div>\n                            </Tippy>\n                        </SubSubtitleWithQuestionTooltip>\n                        <ItemHolderBox>\n                            {Object.keys(itemCount).map((item) => {\n                                const count = itemCount[item] % 5;\n\n                                if (count === 0) return <></>;\n\n                                const chances = {};\n\n                                let currentExtra = 0;\n\n                                while (true) {\n                                    currentExtra++;\n                                    const chance =\n                                        1 -\n                                        cdf(\n                                            currentExtra,\n                                            leftoverCount,\n                                            count,\n                                            selectedItem.quantity\n                                        ) +\n                                        pmf(\n                                            currentExtra,\n                                            leftoverCount,\n                                            count,\n                                            selectedItem.quantity\n                                        );\n\n                                    if (chance <= 0.01 || currentExtra >= 2)\n                                        break;\n\n                                    chances[currentExtra] = (\n                                        chance * 100\n                                    ).toFixed(0);\n                                }\n\n                                return (\n                                    <ItemWithPercentages key={item}>\n                                        <BserItem item={item} />\n                                        {Object.keys(chances).map(\n                                            (quantity) => {\n                                                return (\n                                                    <Text key={quantity}>\n                                                        {quantity}:\n                                                        {chances[quantity]}%\n                                                    </Text>\n                                                );\n                                            }\n                                        )}\n                                    </ItemWithPercentages>\n                                );\n                            })}\n                        </ItemHolderBox>\n                    </>\n                )}\n            </>\n        );\n    } else if (selectedItem.type === itemTypes.ANIMALS) {\n        const area = areas[selectedItem.area];\n        return (\n            <>\n                <Subtitle>\n                    {area.englishName} {animalName[selectedItem.code]}\n                </Subtitle>\n                {animalToGroups[selectedItem.code].map(\n                    ({ group, groupName }) => (\n                        <>\n                            <Subtitle>{groupName}</Subtitle>\n                            <ItemHolderBox>\n                                {animalDropChance[group].map(\n                                    ({ code, probability }) => (\n                                        <ItemWithPercentages\n                                            key={code}\n                                            alignItems={\"center\"}\n                                        >\n                                            <BserItem item={code} />\n                                            <Text\n                                                fontWeight={\n                                                    probability === \"100\"\n                                                        ? 700\n                                                        : null\n                                                }\n                                            >\n                                                {probability}%\n                                            </Text>\n                                        </ItemWithPercentages>\n                                    )\n                                )}\n                            </ItemHolderBox>\n                        </>\n                    )\n                )}\n            </>\n        );\n    } else if (selectedItem.type === itemTypes.SPAWNS) {\n        const area = areas[selectedItem.area];\n\n        return (\n            <>\n                <Subtitle>{area.englishName} Spawn</Subtitle>\n                <Subtitle\n                    color={\n                        settings.color.state\n                            ? zoneColors[selectedItem.zone]\n                            : null\n                    }\n                >\n                    Zone {selectedItem.zone}\n                </Subtitle>\n            </>\n        );\n    } else if (selectedItem.type === itemTypes.COLLECTABLES) {\n        const area = areas[selectedItem.area];\n\n        return (\n            <>\n                <Subtitle>{area.englishName} Collectable</Subtitle>\n                <Subtitle>{codeToName[selectedItem.code]}</Subtitle>\n            </>\n        );\n    } else if (selectedItem.type === itemTypes.SUPPLIES) {\n        const rarity = selectedItem.rarity;\n\n        return (\n            <>\n                <Subtitle>\n                    {supplyToGroups[rarity][0].groupName} Supply Box\n                </Subtitle>\n                {supplyToGroups[rarity].map(({ group, groupName }) => (\n                    <>\n                        <Subtitle>{groupName}</Subtitle>\n                        <ItemHolderBox>\n                            {animalDropChance[group].map(\n                                ({ code, probability }) => (\n                                    <ItemWithPercentages\n                                        key={code}\n                                        alignItems={\"center\"}\n                                    >\n                                        <BserItem item={code} />\n                                        <Text\n                                            fontWeight={\n                                                probability === \"100\"\n                                                    ? 700\n                                                    : null\n                                            }\n                                        >\n                                            {probability}%\n                                        </Text>\n                                    </ItemWithPercentages>\n                                )\n                            )}\n                        </ItemHolderBox>\n                    </>\n                ))}\n            </>\n        );\n    } else {\n        return <Info>Select a Box/Animal/Spawn/Collectable to start</Info>;\n    }\n};\n\nconst HeaderBox = styled.div`\n    display: flex;\n    justify-content: space-between;\n    width: 100%;\n`;\n\nconst QuestionIcon = styled(AiOutlineQuestionCircle)`\n    color: hsl(0, 0%, 60%);\n    height: 100%;\n    width: 2rem;\n\n    :hover {\n        color: hsl(0, 0%, 87%);\n    }\n`;\n\nfunction SideBar({ selectedItem }) {\n    const [isHelpOpened, setHelpOpened] = useState(false);\n\n    return (\n        <SidebarBox>\n            <Modal open={isHelpOpened} onClose={() => setHelpOpened(false)}>\n                <HelpModal onClose={() => setHelpOpened(false)} />\n            </Modal>\n            <HeaderBox>\n                <Header>ERBS Map</Header>\n                <QuestionIcon onClick={() => setHelpOpened(true)} />\n            </HeaderBox>\n\n            <CreateSideBarSection selectedItem={selectedItem} />\n        </SidebarBox>\n    );\n}\n\nconst HelpModalDiv = styled.div`\n    width: 90vw;\n    height: 90vh;\n    background-color: hsl(240, 5%, 30%);\n    color: hsl(0, 0%, 87%);\n    padding: 2rem;\n    border-radius: 0.5rem;\n\n    overflow-y: auto;\n`;\n\nconst CloseButton = styled(AiOutlineClose)`\n    position: absolute;\n    top: 0.8rem;\n    right: 0.8rem;\n    width: 1.5rem;\n    height: 1.5rem;\n\n    color: hsl(0, 0%, 60%);\n\n    :hover {\n        color: hsl(0, 0%, 87%);\n    }\n`;\n\nconst HelpTitle = styled.h2``;\n\nconst StyledImg = styled.img`\n    height: ${({ height }) => height};\n    border-radius: ${({ borderRadius }) => borderRadius};\n    margin: ${({ margin }) => margin};\n    max-width: ${({ maxWidth }) => maxWidth};\n`;\n\nconst HelpSubTitle = styled.h3``;\n\nconst Paragraph = styled.p``;\n\nconst HelpBoxes = styled.div`\n    margin-top: 1.5rem;\n`;\n\nconst StyledLink = styled.a`\n    color: hsl(0, 0%, 60%);\n`;\n\nconst HelpModal = ({ onClose }) => {\n    return (\n        <HelpModalDiv>\n            <CloseButton onClick={onClose} />\n            <HelpTitle>Help Guide</HelpTitle>\n            <HelpBoxes>\n                <HelpSubTitle>Boxes and Spawns</HelpSubTitle>\n                <StyledImg\n                    grade={\"Common\"}\n                    src={process.env.PUBLIC_URL + \"/images/box_guide.png\"}\n                    alt={\"Box Guide\"}\n                    borderRadius={\"0.5rem\"}\n                    height={\"14rem\"}\n                />\n                <Paragraph>\n                    Number on each box represents the number of items in that\n                    box. Each color represents a loot distribution zone/cluster.\n                    To learn more on loot clusters:&nbsp;\n                    <StyledLink\n                        href=\"https://www.youtube.com/watch?v=NCn_0UxFGM8\"\n                        target=\"_blank\"\n                        rel=\"noopener noreferrer\"\n                    >\n                        https://www.youtube.com/watch?v=NCn_0UxFGM8\n                    </StyledLink>\n                </Paragraph>\n            </HelpBoxes>\n\n            <HelpBoxes>\n                <HelpSubTitle>Additional Options</HelpSubTitle>\n                <StyledImg\n                    grade={\"Common\"}\n                    src={process.env.PUBLIC_URL + \"/images/setting_toggles.png\"}\n                    alt={\"Box Guide\"}\n                    borderRadius={\"0.5rem\"}\n                    height={\"10rem\"}\n                />\n                <Paragraph>\n                    Toggle options to see locations of collectables and animals.\n                    Click on Animals to see drop chances of animals!\n                </Paragraph>\n            </HelpBoxes>\n\n            <HelpBoxes>\n                <HelpSubTitle>Reading drop chances</HelpSubTitle>\n                <StyledImg\n                    grade={\"Common\"}\n                    src={process.env.PUBLIC_URL + \"/images/drop_chances.png\"}\n                    alt={\"Box Guide\"}\n                    borderRadius={\"0.5rem\"}\n                    width={\"100%\"}\n                    maxWidth={\"40rem\"}\n                />\n                <Paragraph>\n                    Drop chance are shown in form of \"Quantity: Percentage\".\n                    <br /> <br /> For boxes, All chances that are not 100% are\n                    estimates and not accurate. They should be used as a guide\n                    to what the real chance could be. For animals, they are all\n                    accurate.\n                </Paragraph>\n            </HelpBoxes>\n        </HelpModalDiv>\n    );\n};\n\nexport default SideBar;\n","import SideBar from \"./SideBar\";\nexport default SideBar;\n","import BserMap from \"./BserMap\";\nexport default BserMap;\n","import SideBar from \"../SideBar\";\nimport BserMap from \"../BserMap\";\nimport styled from \"styled-components\";\nimport { useState } from \"react\";\nimport { device } from \"../../utils/device\";\nimport { SettingsProvider } from \"../Context/SettingsContext\";\n\nconst Wrapper = styled.div`\n    display: flex;\n    text-align: center;\n\n    @media ${device.tabletMax} {\n        flex-direction: column;\n    }\n`;\n\nfunction MapSideBarWrapper() {\n    const [selectedItem, setSelectedItemState] = useState({});\n\n    const setSelectedItem = (item, type) => {\n        item.type = type;\n        setSelectedItemState(item);\n    };\n\n    return (\n        <SettingsProvider>\n            <Wrapper>\n                <BserMap\n                    selectedItem={selectedItem}\n                    setSelectedItem={setSelectedItem}\n                />\n                <SideBar selectedItem={selectedItem} />\n            </Wrapper>\n        </SettingsProvider>\n    );\n}\n\nexport default MapSideBarWrapper;\n","import MapSideBarWrapper from \"./MapSideBarWrapper\";\nexport default MapSideBarWrapper;\n","import styled from \"styled-components\";\nimport MapSideBarWrapper from \"./components/MapSideBarWrapper\";\n\nconst Background = styled.div`\n    background-color: hsl(0, 0%, 17.5%);\n`;\n\nfunction App() {\n    return (\n        <Background>\n            <MapSideBarWrapper />\n        </Background>\n    );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}