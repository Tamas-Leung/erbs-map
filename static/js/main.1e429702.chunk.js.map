{"version":3,"sources":["components/BserItem/BserItem.jsx","components/BserMap/BserMap.jsx","components/SideBar/SideBar.jsx","components/SideBar/index.jsx","components/BserMap/index.jsx","components/MapSideBarWrapper/MapSideBarWrapper.jsx","components/MapSideBarWrapper/index.jsx","App.js","reportWebVitals.js","index.js"],"names":["GradeColor","Common","fill","StyledImg","styled","img","grade","border","AltTextFontWrapper","span","ItemBackground","div","size","ImageColorBackground","focus","theme","colors","secondary","Item","QuantityText","BserItem","item","quantity","itemName","codeToName","imgSrc","process","src","alt","zoneColors","StyledSvg","svg","StyledText","text","zone","BserMap","setSelectedItem","maxScale","minScale","showControls","xmlns","xmlnsXlink","viewBox","id","width","height","xlinkHref","boxes","map","box","transform","coords","onClick","SidebarBox","Header","h1","Text","p","Subtitle","h2","color","ItemHolderBox","ItemWithPercentages","SideBar","selectedItem","area","areas","itemCount","areaItemCount","areaItem","zoneItem","mandatoryCount","leftoverCount","Math","floor","zoneLeftovers","index","zoneName","englishName","Object","keys","count","mandatory","chances","currentExtra","chance","cdf","pmf","toFixed","Wrapper","MapSideBarWrapper","useState","Background","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1e429702.chunk.js","sourcesContent":["import styled from \"styled-components\";\nimport codeToName from \"../../data/codeToName.json\";\n\nconst GradeColor = {\n    Common: {\n        fill: \"linear-gradient(hsla(0, 0%, 50%, 1), hsla(0, 0%, 60%, 1))\",\n    },\n};\n\nconst StyledImg = styled.img`\n    height: 100%;\n    /* filter: drop-shadow(1px 1px 0 ${({ grade }) => GradeColor[grade].border})\n        drop-shadow(-1px 1px 0 ${({ grade }) => GradeColor[grade].border})\n        drop-shadow(1px -1px 0 ${({ grade }) => GradeColor[grade].border})\n        drop-shadow(-0.1px -0.1px 0 ${({ grade }) =>\n        GradeColor[grade].border}); */\n`;\n\nconst AltTextFontWrapper = styled.span`\n    height: 100%;\n    font-size: 0.6rem;\n`;\n\nconst ItemBackground = styled.div`\n    border-radius: 1px;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    padding: 2px;\n    border-radius: 3px;\n    margin: 0.1rem;\n    height: ${({ size }) => (size === \"small\" ? \"1.5rem\" : \"2rem\")};\n    width: ${({ size }) => (size === \"small\" ? \"2.7rem\" : \"3.6rem\")};\n`;\n\nconst ImageColorBackground = styled(ItemBackground)`\n    background: ${({ grade }) => GradeColor[grade].fill};\n    position: relative;\n    /* border: ${({ grade }) => GradeColor[grade].border} solid 2px; */\n    /* border-radius: 3px; */\n    background-clip: padding-box;\n    border: ${({ focus, theme }) =>\n        focus ? `${theme.colors.secondary} 2px solid` : `transparent`};\n`;\n\nconst Item = styled.div`\n    display: flex;\n    align-items: center;\n    justify-content: center;\n`;\n\nconst QuantityText = styled.div`\n    position: absolute;\n    bottom: 0;\n    right: 0;\n    background-color: hsl(0, 0%, 17.5%);\n    color: hsl(0, 0%, 87%);\n    padding: 0 0.2rem;\n    font-size: 0.9rem;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    border-radius: 3px;\n`;\n\nfunction BserItem({ item, quantity, size }) {\n    let itemName = codeToName[item];\n\n    let imgSrc = process.env.PUBLIC_URL + \"/images/items/\" + item + \".png\";\n\n    return (\n        <Item>\n            <ImageColorBackground grade={\"Common\"} size={size}>\n                <AltTextFontWrapper>\n                    <StyledImg grade={\"Common\"} src={imgSrc} alt={itemName} />\n                </AltTextFontWrapper>\n                {quantity && <QuantityText>{quantity}</QuantityText>}\n            </ImageColorBackground>\n        </Item>\n    );\n}\n\nexport default BserItem;\n","import styled from \"styled-components\";\nimport { MapInteractionCSS } from \"react-map-interaction\";\nimport boxes from \"../../data/boxes.json\";\n\nexport const zoneColors = {\n    0: \"hsl(0,0%, 75%)\",\n    1: \"hsl(0, 100%, 45%)\",\n    2: \"hsl(55, 100%, 45%)\",\n    3: \"hsl(120, 100%, 45%)\",\n    4: \"hsl(200, 100%, 45%)\",\n    5: \"hsl(304, 100%, 45%)\",\n};\n\nconst StyledSvg = styled.svg`\n    width: 100%;\n    height: calc(100vh - 4px);\n`;\n\nconst StyledText = styled.text`\n    fill: ${({ zone }) => zoneColors[zone]};\n    font-size: 10px;\n    font-family: Trebuchet MS, Lucida Grande, Lucida Sans Unicode, Lucida Sans,\n        Tahoma, sans-serif;\n    cursor: pointer;\n`;\n\nfunction BserMap({ setSelectedItem }) {\n    return (\n        <MapInteractionCSS maxScale={10} minScale={0.95} showControls={true}>\n            <StyledSvg\n                xmlns=\"http://www.w3.org/2000/svg\"\n                xmlnsXlink=\"http://www.w3.org/1999/xlink\"\n                viewBox=\"0 0 772 887\"\n            >\n                {/* <title>ZoneMapping</title> */}\n                <g id=\"Layer_1\" data-name=\"Layer 1\">\n                    <image\n                        width=\"772\"\n                        height=\"887\"\n                        xlinkHref={process.env.PUBLIC_URL + \"/MiniMap_01.png\"}\n                    />\n                </g>\n                {boxes.map((box) => (\n                    <StyledText\n                        transform={`translate(${box.coords[0]} ${box.coords[1]} )`}\n                        zone={box.zone}\n                        onClick={() => {\n                            setSelectedItem(box);\n                        }}\n                    >\n                        {box.quantity}\n                    </StyledText>\n                ))}\n            </StyledSvg>\n        </MapInteractionCSS>\n    );\n}\n\nexport default BserMap;\n","import styled from \"styled-components\";\nimport areas from \"../../data/areas.json\";\nimport areaItemCount from \"../../data/areaItemCount.json\";\nimport BserItem from \"../BserItem/BserItem\";\nimport boxes from \"../../data/boxes.json\";\nimport cdf from \"@stdlib/stats-base-dists-hypergeometric-cdf\";\nimport pmf from \"@stdlib/stats-base-dists-hypergeometric-pmf\";\nimport { zoneColors } from \"../BserMap/BserMap\";\n\nconst SidebarBox = styled.div`\n    width: 40%;\n    background-color: hsl(240, 5%, 30%);\n    display: flex;\n    padding: 0px 20px;\n    flex-direction: column;\n    align-items: start;\n    /* position: relative;\n    ::after {\n        content: \"\";\n        position: absolute;\n        left: 0;\n        top: 50%;\n        transform: translate(-50%, -50%);\n        width: 10px;\n        height: 50px;\n        background-color: hsl(240, 5%, 30%);\n    } */\n`;\n\nconst Header = styled.h1`\n    margin: 0.8rem 0px;\n    color: hsl(0, 0%, 87%);\n`;\n\nconst Text = styled.p`\n    font-size: 1rem;\n    margin: 0.2rem 0px;\n    color: hsl(0, 0%, 60%);\n`;\n\nconst Subtitle = styled.h2`\n    margin: 0.4rem 0px;\n    color: ${({ color }) => color || \"hsl(0, 0%,87%)\"};\n`;\n\nconst ItemHolderBox = styled.div`\n    margin-bottom: 0.2rem;\n    display: flex;\n    flex-wrap: wrap;\n`;\n\nconst ItemWithPercentages = styled.div`\n    display: flex;\n    flex-direction: column;\n    align-items: start;\n`;\n\nfunction SideBar({ selectedItem }) {\n    const area = areas[selectedItem.area];\n    const itemCount = areaItemCount[selectedItem.area];\n    let areaItem = 0;\n    const zoneItem = [];\n    let mandatoryCount = 0;\n    let leftoverCount = 0;\n\n    for (const box of boxes) {\n        if (box.area !== selectedItem.area) continue;\n        areaItem += box.quantity;\n\n        zoneItem[box.zone] = (zoneItem[box.zone] || 0) + box.quantity;\n    }\n\n    for (const item in itemCount) {\n        const quantity = itemCount[item];\n\n        mandatoryCount += Math.floor(quantity / 5);\n        leftoverCount += quantity % 5;\n    }\n\n    const zoneLeftovers = zoneItem.map((zone, index) => {\n        if (index === 0) return zone;\n        return zone - mandatoryCount;\n    });\n\n    const zoneName = selectedItem.zone\n        ? `Zone ${selectedItem.zone}`\n        : `Zoneless`;\n\n    return (\n        <SidebarBox>\n            <Header>ERBS Map</Header>\n            {selectedItem.area && (\n                <>\n                    <Subtitle>{area.englishName}</Subtitle>\n                    <Text>Items: {areaItem}</Text>\n                    <ItemHolderBox>\n                        {Object.keys(itemCount).map((item) => {\n                            const count = itemCount[item];\n\n                            return <BserItem item={item} quantity={count} />;\n                        })}\n                    </ItemHolderBox>\n                    {/* <Text>Items per zone: {mandatoryCount}</Text>\n                    <ItemHolderBox>\n                        {Object.keys(itemCount).map((item) => {\n                            const count = Math.floor(itemCount[item] / 5);\n\n                            if (count === 0) return <></>;\n\n                            return <BserItem item={item} quantity={count} />;\n                        })}\n                    </ItemHolderBox>\n                    <Text>Leftovers: {leftoverCount}</Text>\n                    <ItemHolderBox>\n                        {Object.keys(itemCount).map((item) => {\n                            const count = itemCount[item] % 5;\n\n                            if (count === 0) return <></>;\n\n                            return <BserItem item={item} quantity={count} />;\n                        })}\n                    </ItemHolderBox> */}\n                    <Subtitle color={zoneColors[selectedItem.zone]}>\n                        {zoneName}\n                    </Subtitle>\n                    <Text>Total Items: {zoneItem[selectedItem.zone]}</Text>\n                    <Text>Extras: {zoneLeftovers[selectedItem.zone]}</Text>\n                    <ItemHolderBox>\n                        {Object.keys(itemCount).map((item) => {\n                            const count = itemCount[item] % 5;\n                            const mandatory = Math.floor(itemCount[item] / 5);\n\n                            if (count === 0) return <></>;\n\n                            const chances = {};\n\n                            if (mandatory > 0) chances[mandatory] = 100;\n\n                            let currentExtra = 0;\n\n                            while (true) {\n                                currentExtra++;\n                                const chance =\n                                    1 -\n                                    cdf(\n                                        currentExtra,\n                                        leftoverCount,\n                                        count,\n                                        zoneLeftovers[selectedItem.zone]\n                                    ) +\n                                    pmf(\n                                        currentExtra,\n                                        leftoverCount,\n                                        count,\n                                        zoneLeftovers[selectedItem.zone]\n                                    );\n\n                                if (chance <= 0.01 || currentExtra >= 4) break;\n\n                                chances[currentExtra + mandatory] = (\n                                    chance * 100\n                                ).toFixed(0);\n                            }\n\n                            return (\n                                <ItemWithPercentages>\n                                    <BserItem item={item} />\n                                    {Object.keys(chances).map((quantity) => {\n                                        return (\n                                            <Text>\n                                                {quantity}: {chances[quantity]}%\n                                            </Text>\n                                        );\n                                    })}\n                                </ItemWithPercentages>\n                            );\n                        })}\n                    </ItemHolderBox>\n                </>\n            )}\n        </SidebarBox>\n    );\n}\n\nexport default SideBar;\n","import SideBar from \"./SideBar\";\nexport default SideBar;\n","import BserMap from \"./BserMap\";\nexport default BserMap;\n","import SideBar from \"../SideBar\";\nimport BserMap from \"../BserMap\";\nimport styled from \"styled-components\";\nimport { useState } from \"react\";\n\nconst Wrapper = styled.div`\n    display: flex;\n    text-align: center;\n`;\n\nfunction MapSideBarWrapper() {\n    const [selectedItem, setSelectedItem] = useState({});\n\n    return (\n        <Wrapper>\n            <BserMap\n                selectedItem={selectedItem}\n                setSelectedItem={setSelectedItem}\n            />\n            <SideBar selectedItem={selectedItem} />\n        </Wrapper>\n    );\n}\n\nexport default MapSideBarWrapper;\n","import MapSideBarWrapper from \"./MapSideBarWrapper\";\nexport default MapSideBarWrapper;\n","import styled from \"styled-components\";\nimport MapSideBarWrapper from \"./components/MapSideBarWrapper\";\n\nconst Background = styled.div`\n    background-color: hsl(0, 0%, 17.5%);\n`;\n\nfunction App() {\n    return (\n        <Background>\n            <MapSideBarWrapper />\n        </Background>\n    );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}