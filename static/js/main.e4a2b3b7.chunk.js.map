{"version":3,"sources":["components/BserItem/BserItem.jsx","components/Modal/Modal.jsx","components/Modal/index.jsx","utils/device.js","components/UpdateHistory/UpdateHistory.jsx","components/UpdateHistory/index.jsx","components/Context/SettingsContext.jsx","components/BserMap/BserMap.jsx","components/SideBar/SideBar.jsx","components/SideBar/index.jsx","components/BserMap/index.jsx","components/MapSideBarWrapper/MapSideBarWrapper.jsx","components/MapSideBarWrapper/index.jsx","App.js","reportWebVitals.js","index.js"],"names":["GradeColor","Common","fill","StyledImg","styled","img","grade","border","AltTextFontWrapper","span","ItemBackground","div","size","ImageColorBackground","focus","theme","colors","secondary","Item","QuantityText","BserItem","item","quantity","itemName","codeToName","imgSrc","process","src","alt","StyledModal","Overlay","Modal","open","children","onClose","ReactDom","createPortal","onClick","document","getElementById","device","mobileS","mobileM","mobileL","tablet","laptop","laptopL","desktop","desktopL","mobileSMax","mobileMMax","mobileLMax","tabletMax","laptopMax","laptopLMax","desktopMax","desktopLMax","HistoryBox","HistoryTitle","h2","ChangeDate","ChangesList","ul","ChangesListItem","li","historyData","date","changes","UpdateHistory","map","change","SettingsContext","createContext","SettingsProvider","useState","color","numbers","animals","spawns","collectables","settings","setSettings","Provider","value","toggleNumbers","toggleColor","toggleAnimals","toggleSpawns","toggleCollectables","zoneColors","StyledSvg","svg","StyledText","text","isColorEnabled","zone","StyledCircle","circle","SettingBox","CheckboxWithText","CheckboxText","p","Checkbox","input","MapDiv","Credits","HistoryText","CreditsBox","CreditLink","a","BserMap","setSelectedItem","useContext","isCreditsOpen","setIsCreditsOpen","isHistoryOpen","setIsHistoryOpen","href","target","rel","type","checked","onChange","maxScale","minScale","showControls","xmlns","xmlnsXlink","viewBox","id","width","height","xlinkHref","animal","code","x","parseFloat","coords","y","boxes","box","transform","onTouchEnd","cx","cy","r","SidebarBox","Header","h1","Text","Subtitle","ItemHolderBox","ItemWithPercentages","SubSubTitle","h3","SubSubtitleWithQuestionTooltip","QuestionTooltip","AiOutlineQuestionCircle","Info","SideBar","selectedItem","area","areas","itemCount","areaItemCount","areaItem","zoneItem","mandatoryCount","leftoverCount","Math","floor","zoneLeftovers","index","zoneName","englishName","Object","keys","count","arrow","content","mandatory","chances","currentExtra","chance","cdf","pmf","toFixed","Wrapper","MapSideBarWrapper","Background","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"yOAGMA,EAAa,CACfC,OAAQ,CACJC,KAAM,8DAIRC,EAAYC,IAAOC,IAAV,kNAEwB,gBAAGC,EAAH,EAAGA,MAAH,OAAeN,EAAWM,GAAOC,UACvC,gBAAGD,EAAH,EAAGA,MAAH,OAAeN,EAAWM,GAAOC,UACjC,gBAAGD,EAAH,EAAGA,MAAH,OAAeN,EAAWM,GAAOC,UAC5B,gBAAGD,EAAH,EAAGA,MAAH,OAC9BN,EAAWM,GAAOC,UAGpBC,EAAqBJ,IAAOK,KAAV,uEAKlBC,EAAiBN,IAAOO,IAAV,qOAQN,kBAAwB,UAAxB,EAAGC,KAA+B,SAAW,UAC9C,kBAAwB,UAAxB,EAAGA,KAA+B,SAAW,YAGpDC,EAAuBT,YAAOM,EAAPN,CAAH,iMACR,gBAAGE,EAAH,EAAGA,MAAH,OAAeN,EAAWM,GAAOJ,QAElC,gBAAGI,EAAH,EAAGA,MAAH,OAAeN,EAAWM,GAAOC,UAGpC,gBAAGO,EAAH,EAAGA,MAAOC,EAAV,EAAUA,MAAV,OACND,EAAK,UAAMC,EAAMC,OAAOC,UAAnB,+BAGPC,EAAOd,IAAOO,IAAV,wGAMJQ,EAAef,IAAOO,IAAV,gTA+BHS,I,IAAAA,EAjBf,YAA6C,IAAzBC,EAAwB,EAAxBA,KAAMC,EAAkB,EAAlBA,SAAUV,EAAQ,EAARA,KAC5BW,EAAWC,EAAWH,GAEtBI,EAASC,kBAA4CL,EAAO,OAEhE,OACI,cAACH,EAAD,UACI,eAACL,EAAD,CAAsBP,MAAO,SAAUM,KAAMA,EAA7C,UACI,cAACJ,EAAD,UACI,cAACL,EAAD,CAAWG,MAAO,SAAUqB,IAAKF,EAAQG,IAAKL,MAEjDD,GAAY,cAACH,EAAD,UAAeG,U,0DCzEtCO,EAAczB,IAAOO,IAAV,4IAQXmB,EAAU1B,IAAOO,IAAV,6KCVEoB,I,UAAAA,EDoBA,YAA6C,IAA5BC,EAA2B,EAA3BA,KAAMC,EAAqB,EAArBA,SAAUC,EAAW,EAAXA,QAC5C,OAAKF,EAEEG,IAASC,aACZ,qCACI,cAACN,EAAD,CAASO,QAASH,IAClB,cAACL,EAAD,UAAcI,OAElBK,SAASC,eAAe,SAPV,MEtBT3B,EACA,QADAA,EAEA,QAFAA,EAGA,QAHAA,EAID,QAJCA,EAKD,SALCA,EAMA,SANAA,EAOA,SAGA4B,EAAS,CAClBC,QAAQ,eAAD,OAAiB7B,EAAjB,KACP8B,QAAQ,eAAD,OAAiB9B,EAAjB,KACP+B,QAAQ,eAAD,OAAiB/B,EAAjB,KACPgC,OAAO,eAAD,OAAiBhC,EAAjB,KACNiC,OAAO,eAAD,OAAiBjC,EAAjB,KACNkC,QAAQ,eAAD,OAAiBlC,EAAjB,KACPmC,QAAQ,eAAD,OAAiBnC,EAAjB,KACPoC,SAAS,eAAD,OAAiBpC,EAAjB,KACRqC,WAAW,eAAD,OAAiBrC,EAAjB,KACVsC,WAAW,eAAD,OAAiBtC,EAAjB,KACVuC,WAAW,eAAD,OAAiBvC,EAAjB,KACVwC,UAAU,eAAD,OAAiBxC,EAAjB,KACTyC,UAAU,eAAD,OAAiBzC,EAAjB,KACT0C,WAAW,eAAD,OAAiB1C,EAAjB,KACV2C,WAAW,eAAD,OAAiB3C,EAAjB,KACV4C,YAAY,eAAD,OAAiB5C,EAAjB,MCxBT6C,GAAarD,IAAOO,IAAV,6SAcV+C,GAAetD,IAAOuD,GAAV,oDAIZC,GAAaxD,IAAOO,IAAV,mDAIVkD,GAAczD,IAAO0D,GAAV,sDAIXC,GAAkB3D,IAAO4D,GAAV,oDAIfC,GAAc,CAChB,CACIC,KAAM,aACNC,QAAS,CACL,0BACA,oCACA,uBACA,qCAGR,CACID,KAAM,aACNC,QAAS,CAAC,4BAEd,CACID,KAAM,aACNC,QAAS,CAAC,4BAEd,CACID,KAAM,aACNC,QAAS,CAAC,oCAEd,CACID,KAAM,aACNC,QAAS,CACL,qCACA,oCACA,qCAGR,CACID,KAAM,UACNC,QAAS,CAAC,2BAsBHC,I,oCCrFAA,GDmEf,WACI,OACI,eAACX,GAAD,WACI,cAACC,GAAD,6BACCO,GAAYI,KAAI,gBAAGH,EAAH,EAAGA,KAAMC,EAAT,EAASA,QAAT,OACb,qCACI,cAACP,GAAD,UAAaM,IACb,cAACL,GAAD,UACKM,EAAQE,KAAI,SAACC,GAAD,OACT,cAACP,GAAD,UAAkBO,mB,QE3ExCC,GAAkBC,wBAAc,MAEzBC,GAAmB,SAAC,GAAkB,IAAhBxC,EAAe,EAAfA,SAC/B,EAAgCyC,mBAAS,CACrCC,OAAO,EACPC,SAAS,EACTC,SAAS,EACTC,QAAQ,EACRC,cAAc,IALlB,mBAAOC,EAAP,KAAiBC,EAAjB,KA2CA,OACI,cAACV,GAAgBW,SAAjB,CACIC,MAAO,CACHH,WACAI,cAhCU,WAClBH,EAAY,6BACLD,GADI,IAEPJ,SAAUI,EAASJ,YA8BfS,YAxCQ,WAChBJ,EAAY,6BACLD,GADI,IAEPL,OAAQK,EAASL,UAsCbW,cAbU,WAClBL,EAAY,6BACLD,GADI,IAEPH,SAAUG,EAASH,YAWfU,aArBS,WACjBN,EAAY,6BACLD,GADI,IAEPF,QAASE,EAASF,WAmBdU,mBA7Be,WACvBP,EAAY,6BACLD,GADI,IAEPD,cAAeC,EAASD,kBAmB5B,SAUK9C,KAKEsC,MCtDFkB,GAAa,CACtB,EAAG,iBACH,EAAG,oBACH,EAAG,qBACH,EAAG,sBACH,EAAG,sBACH,EAAG,uBAGDC,GAAYtF,IAAOuF,IAAV,2IAGFnD,EAAOW,YAKdyC,GAAaxF,IAAOyF,KAAV,wMACJ,gBAAGC,EAAH,EAAGA,eAAgBC,EAAnB,EAAmBA,KAAnB,OACJD,EAAiBL,GAAWM,GAAQ,qBAOtCC,GAAe5F,IAAO6F,OAAV,4HACN,gBAAGH,EAAH,EAAGA,eAAgBC,EAAnB,EAAmBA,KAAnB,OACJD,EAAiBL,GAAWM,GAAQ,qBAMtCG,GAAa9F,IAAOO,IAAV,2TAcVwF,GAAmB/F,IAAOO,IAAV,4EAKhByF,GAAehG,IAAOiG,EAAV,yDAIZC,GAAWlG,IAAOmG,MAAV,4BAERC,GAASpG,IAAOO,IAAV,0EAKN8F,GAAUrG,IAAOO,IAAV,yNAYP+F,GAActG,YAAOqG,GAAPrG,CAAH,mEAKXuG,GAAavG,IAAOO,IAAV,iQAYViG,GAAaxG,IAAOyG,EAAV,2DAkJDC,I,8BAAAA,GA9If,YAAuC,IAApBC,EAAmB,EAAnBA,gBACf,EACIC,qBAAWzC,IADPS,EAAR,EAAQA,SAAUM,EAAlB,EAAkBA,cAGlB,GAHA,EAAiCE,mBAAjC,EAAqDD,aAGXb,oBAAS,IAAnD,mBAAOuC,EAAP,KAAsBC,EAAtB,KACA,EAA0CxC,oBAAS,GAAnD,mBAAOyC,EAAP,KAAsBC,EAAtB,KAEA,OACI,eAACZ,GAAD,WACI,cAAC,EAAD,CAAOxE,KAAMiF,EAAe/E,QAAS,kBAAMgF,GAAiB,IAA5D,SACI,eAACP,GAAD,WACI,0DACA,cAACC,GAAD,CACIS,KAAK,gGACLC,OAAO,SACPC,IAAI,sBAHR,wBAOA,sIAIA,mDACA,uHAMR,cAAC,EAAD,CAAOvF,KAAMmF,EAAejF,QAAS,kBAAMkF,GAAiB,IAA5D,SACI,cAAC,GAAD,MAEJ,cAACX,GAAD,CAASpE,QAAS,kBAAM6E,GAAiB,IAAzC,qBACA,cAACR,GAAD,CAAarE,QAAS,kBAAM+E,GAAiB,IAA7C,wCAGA,cAAClB,GAAD,UAiBI,eAACC,GAAD,WACI,cAACG,GAAD,CACIkB,KAAK,WACLC,QAASzC,EAASH,QAClB6C,SAAUpC,IAEd,cAACc,GAAD,2BAmBR,cAAC,oBAAD,CAAmBuB,SAAU,EAAGC,SAAU,IAAMC,cAAc,EAA9D,SACI,eAACnC,GAAD,CACIoC,MAAM,6BACNC,WAAW,+BACXC,QAAQ,cAHZ,UAMI,mBAAGC,GAAG,UAAU,YAAU,UAA1B,SACI,uBACIC,MAAM,MACNC,OAAO,MACPC,UACI1G,uBAIXsD,EAASH,SACNA,EAAQR,KAAI,SAACgE,GAAD,OACR,uBACID,UACI1G,IAAA,0BACmB2G,EAAOC,KAD1B,QAGJC,EAAGC,WAAWH,EAAOI,OAAO,IAAM,KAClCC,EAAGF,WAAWH,EAAOI,OAAO,IAAM,KAClCP,MAAO,GACPC,OAAQ,QAGnBQ,EAAMtE,KAAI,SAACuE,GAAD,OACP5D,EAASJ,QACL,cAACgB,GAAD,CACIiD,UAAS,oBAAeD,EAAIH,OAAO,GAA1B,YAAgCG,EAAIH,OAAO,GAA3C,MACT1C,KAAM6C,EAAI7C,KACVD,eAAgBd,EAASL,MACzBtC,QAAS,WACL0E,EAAgB6B,IAEpBE,WAAY,WACR/B,EAAgB6B,IARxB,SAWKA,EAAItH,WAGT,cAAC0E,GAAD,CACI+C,GAAIP,WAAWI,EAAIH,OAAO,IAAM,EAChCO,GAAIR,WAAWI,EAAIH,OAAO,IAAM,EAChCQ,EAAE,MACFnD,eAAgBd,EAASL,MACzBoB,KAAM6C,EAAI7C,KACV1D,QAAS,WACL0E,EAAgB6B,kB,kBC/N9CM,I,OAAa9I,IAAOO,IAAV,sUAWH6B,EAAOW,aAMdgG,GAAS/I,IAAOgJ,GAAV,oFAKNC,GAAOjJ,IAAOiG,EAAV,0GAMJiD,GAAWlJ,IAAOuD,GAAV,wEAED,qBAAGgB,OAAqB,oBAG/B4E,GAAgBnJ,IAAOO,IAAV,oGAMb6I,GAAsBpJ,IAAOO,IAAV,wGAMnB8I,GAAcrJ,IAAOsJ,GAAV,yFAKXC,GAAiCvJ,IAAOO,IAAV,mGAM9BiJ,GAAkBxJ,YAAOyJ,KAAPzJ,CAAH,kFAKf0J,GAAO1J,IAAOsJ,GAAV,oFAmSKK,I,GC9WAA,GDgFf,YAAoC,IAAD,EAAhBC,EAAgB,EAAhBA,aACPhF,EAAagC,qBAAWzC,IAAxBS,SAEFiF,EAAOC,EAAMF,EAAaC,MAC1BE,EAAYC,EAAcJ,EAAaC,MACzCI,EAAW,EACTC,EAAW,GACbC,EAAiB,EACjBC,EAAgB,EARW,cAUb7B,GAVa,IAU/B,2BAAyB,CAAC,IAAfC,EAAc,QACjBA,EAAIqB,OAASD,EAAaC,OAC9BI,GAAYzB,EAAItH,SAEhBgJ,EAAS1B,EAAI7C,OAASuE,EAAS1B,EAAI7C,OAAS,GAAK6C,EAAItH,WAd1B,8BAiB/B,IAAK,IAAMD,KAAQ8I,EAAW,CAC1B,IAAM7I,EAAW6I,EAAU9I,GAE3BkJ,GAAkBE,KAAKC,MAAMpJ,EAAW,GACxCkJ,GAAiBlJ,EAAW,EAGhC,IAAMqJ,EAAgBL,EAASjG,KAAI,SAAC0B,EAAM6E,GACtC,OAAc,IAAVA,EAAoB7E,EACjBA,EAAOwE,KAGZM,EAAWb,EAAajE,KAAb,eACHiE,EAAajE,MADV,WAIjB,OACI,eAACmD,GAAD,WACI,cAACC,GAAD,uBACCa,EAAaC,KACVD,EAAaC,MACT,qCACI,cAACX,GAAD,UAAWW,EAAKa,cAChB,eAACzB,GAAD,qBAAcgB,KACd,cAACd,GAAD,UACKwB,OAAOC,KAAKb,GAAW9F,KAAI,SAAChD,GACzB,IAAM4J,EAAQd,EAAU9I,GAExB,OACI,cAAC,EAAD,CAAUA,KAAMA,EAAMC,SAAU2J,SAwB5C,cAAC3B,GAAD,CACI3E,MACIK,EAASL,MACHc,GAAWuE,EAAajE,MACxB,KAJd,SAOK8E,IAQJb,EAAajE,KACV,qCACI,eAACsD,GAAD,6BACoBiB,EAASN,EAAajE,SAE1C,eAACsD,GAAD,sBACasB,EAAcX,EAAajE,SAGxC,eAAC4D,GAAD,WACI,cAACF,GAAD,kCAGA,cAAC,KAAD,CACIyB,OAAO,EACPC,QACI,uDACwB,IACpB,0CAFJ,2HAHR,SAaI,8BACI,cAACvB,GAAD,WAKZ,cAACL,GAAD,UACKwB,OAAOC,KAAKb,GAAW9F,KAAI,SAAChD,GACzB,IAAM4J,EAAQd,EAAU9I,GAAQ,EAE1B+J,EACoB,IAAtBpB,EAAajE,KACP0E,KAAKC,MACDP,EAAU9I,GAAQ,GAEtB,EAEJgK,EAAU,GAEZD,EAAY,IACZC,EAAQD,GAAa,KAIzB,IAFA,IAAIE,EAAe,IAEN,CACTA,IACA,IAAMC,EACF,EACAC,IACIF,EACAd,EACAS,EACAN,EACIX,EAAajE,OAGrB0F,IACIH,EACAd,EACAS,EACAN,EACIX,EAAajE,OAIzB,GACIwF,GAAU,KACVD,GAAgB,EAEhB,MAEJD,EAAQC,EAAeF,IACT,IAATG,GAAcG,QAAQ,GAG/B,OACI,eAAClC,GAAD,WACI,cAAC,EAAD,CAAUnI,KAAMA,IACf0J,OAAOC,KAAKK,GAAShH,KAClB,SAAC/C,GACG,OACI,eAAC+H,GAAD,WACK/H,EADL,IAGQ+J,EACI/J,GAJZ,qBAkBhC,qCACI,eAAC+H,GAAD,yBACgBiB,EAASN,EAAajE,SAEtC,eAAC4D,GAAD,WACI,cAACF,GAAD,0CAGA,cAAC,KAAD,CACIyB,OAAO,EACPC,QACI,uDACwB,IACpB,0CAFJ,0FAHR,SAYI,8BACI,cAACvB,GAAD,WAIZ,cAACL,GAAD,UACKwB,OAAOC,KAAKb,GAAW9F,KAAI,SAAChD,GACzB,IAAM4J,EAAQd,EAAU9I,GAAQ,EAEhC,GAAc,IAAV4J,EAAa,OAAO,6BAMxB,IAJA,IAAMI,EAAU,GAEZC,EAAe,IAEN,CACTA,IACA,IAAMC,EACF,EACAC,IACIF,EACAd,EACAS,EACAjB,EAAa1I,UAEjBmK,IACIH,EACAd,EACAS,EACAjB,EAAa1I,UAGrB,GACIiK,GAAU,KACVD,GAAgB,EAEhB,MAEJD,EAAQC,IACK,IAATC,GACFG,QAAQ,GAGd,OACI,eAAClC,GAAD,WACI,cAAC,EAAD,CAAUnI,KAAMA,IACf0J,OAAOC,KAAKK,GAAShH,KAClB,SAAC/C,GACG,OACI,eAAC+H,GAAD,WACK/H,EADL,IAGQ+J,EACI/J,GAJZ,wBAqB5C,cAACwI,GAAD,wCExWDhD,MCMT6E,GAAUvL,IAAOO,IAAV,sIAIA6B,EAAOW,YAqBLyI,I,GC/BAA,GDef,WACI,MAAwClH,mBAAS,IAAjD,mBAAOsF,EAAP,KAAqBjD,EAArB,KAEA,OACI,cAAC,GAAD,UACI,eAAC4E,GAAD,WACI,cAAC,GAAD,CACI3B,aAAcA,EACdjD,gBAAiBA,IAErB,cAAC,GAAD,CAASiD,aAAcA,UEvBjC6B,GAAazL,IAAOO,IAAV,wEAYDmL,OARf,WACI,OACI,cAACD,GAAD,UACI,cAAC,GAAD,OCEGE,GAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACL,cAAC,IAAMC,WAAP,UACI,cAAC,GAAD,MAEJpK,SAASC,eAAe,SAM5BwJ,M","file":"static/js/main.e4a2b3b7.chunk.js","sourcesContent":["import styled from \"styled-components\";\nimport codeToName from \"../../data/codeToName.json\";\n\nconst GradeColor = {\n    Common: {\n        fill: \"linear-gradient(hsla(0, 0%, 50%, 1), hsla(0, 0%, 60%, 1))\",\n    },\n};\n\nconst StyledImg = styled.img`\n    height: 100%;\n    /* filter: drop-shadow(1px 1px 0 ${({ grade }) => GradeColor[grade].border})\n        drop-shadow(-1px 1px 0 ${({ grade }) => GradeColor[grade].border})\n        drop-shadow(1px -1px 0 ${({ grade }) => GradeColor[grade].border})\n        drop-shadow(-0.1px -0.1px 0 ${({ grade }) =>\n        GradeColor[grade].border}); */\n`;\n\nconst AltTextFontWrapper = styled.span`\n    height: 100%;\n    font-size: 0.6rem;\n`;\n\nconst ItemBackground = styled.div`\n    border-radius: 1px;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    padding: 2px;\n    border-radius: 3px;\n    margin: 0.1rem;\n    height: ${({ size }) => (size === \"small\" ? \"1.5rem\" : \"2rem\")};\n    width: ${({ size }) => (size === \"small\" ? \"2.7rem\" : \"3.6rem\")};\n`;\n\nconst ImageColorBackground = styled(ItemBackground)`\n    background: ${({ grade }) => GradeColor[grade].fill};\n    position: relative;\n    /* border: ${({ grade }) => GradeColor[grade].border} solid 2px; */\n    /* border-radius: 3px; */\n    background-clip: padding-box;\n    border: ${({ focus, theme }) =>\n        focus ? `${theme.colors.secondary} 2px solid` : `transparent`};\n`;\n\nconst Item = styled.div`\n    display: flex;\n    align-items: center;\n    justify-content: center;\n`;\n\nconst QuantityText = styled.div`\n    position: absolute;\n    bottom: 0;\n    right: 0;\n    background-color: hsl(0, 0%, 17.5%);\n    color: hsl(0, 0%, 87%);\n    padding: 0 0.2rem;\n    font-size: 0.9rem;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    border-radius: 3px;\n`;\n\nfunction BserItem({ item, quantity, size }) {\n    let itemName = codeToName[item];\n\n    let imgSrc = process.env.PUBLIC_URL + \"/images/items/\" + item + \".png\";\n\n    return (\n        <Item>\n            <ImageColorBackground grade={\"Common\"} size={size}>\n                <AltTextFontWrapper>\n                    <StyledImg grade={\"Common\"} src={imgSrc} alt={itemName} />\n                </AltTextFontWrapper>\n                {quantity && <QuantityText>{quantity}</QuantityText>}\n            </ImageColorBackground>\n        </Item>\n    );\n}\n\nexport default BserItem;\n","import ReactDom from \"react-dom\";\nimport styled from \"styled-components\";\n\nconst StyledModal = styled.div`\n    position: fixed;\n    top: 50%;\n    left: 50%;\n    transform: translate(-50%, -50%);\n    z-index: 1000;\n`;\n\nconst Overlay = styled.div`\n    position: fixed;\n    top: 0;\n    left: 0;\n    right: 0;\n    bottom: 0;\n    background-color: hsla(0, 0%, 0%, 0.3);\n    z-index: 1000;\n`;\n\nexport default function Modal({ open, children, onClose }) {\n    if (!open) return null;\n\n    return ReactDom.createPortal(\n        <>\n            <Overlay onClick={onClose} />\n            <StyledModal>{children}</StyledModal>\n        </>,\n        document.getElementById(\"root\")\n    );\n}\n","import Modal from \"./Modal\";\nexport default Modal;\n","export const size = {\n    mobileS: \"320px\",\n    mobileM: \"375px\",\n    mobileL: \"425px\",\n    tablet: \"768px\",\n    laptop: \"1024px\",\n    laptopL: \"1440px\",\n    desktop: \"2560px\",\n};\n\nexport const device = {\n    mobileS: `(min-width: ${size.mobileS})`,\n    mobileM: `(min-width: ${size.mobileM})`,\n    mobileL: `(min-width: ${size.mobileL})`,\n    tablet: `(min-width: ${size.tablet})`,\n    laptop: `(min-width: ${size.laptop})`,\n    laptopL: `(min-width: ${size.laptopL})`,\n    desktop: `(min-width: ${size.desktop})`,\n    desktopL: `(min-width: ${size.desktop})`,\n    mobileSMax: `(max-width: ${size.mobileS})`,\n    mobileMMax: `(max-width: ${size.mobileM})`,\n    mobileLMax: `(max-width: ${size.mobileL})`,\n    tabletMax: `(max-width: ${size.tablet})`,\n    laptopMax: `(max-width: ${size.laptop})`,\n    laptopLMax: `(max-width: ${size.laptopL})`,\n    desktopMax: `(max-width: ${size.desktop})`,\n    desktopLMax: `(max-width: ${size.desktop})`,\n};\n","import styled from \"styled-components\";\n\nconst HistoryBox = styled.div`\n    width: 40rem;\n    max-width: 90vw;\n    padding: 2rem;\n    border-radius: 0.5rem;\n    background-color: hsl(240, 5%, 30%);\n    color: hsl(0, 0%, 87%);\n    display: flex;\n    flex-direction: column;\n    gap: 0.5rem;\n    max-height: 80vh;\n    overflow-y: auto;\n`;\n\nconst HistoryTitle = styled.h2`\n    font-size: 1.5rem;\n`;\n\nconst ChangeDate = styled.div`\n    font-weight: 700;\n`;\n\nconst ChangesList = styled.ul`\n    margin-bottom: 1rem;\n`;\n\nconst ChangesListItem = styled.li`\n    margin-left: 1rem;\n`;\n\nconst historyData = [\n    {\n        date: \"2021/11/06\",\n        changes: [\n            \"Updated to Patch 0.44.0\",\n            \"Fixed School and Forest Loot Maps\",\n            \"Added Animals Toggle\",\n            \"Removed Color and number toggles\",\n        ],\n    },\n    {\n        date: \"2021/09/30\",\n        changes: [\"Updated to Patch 0.42.0\"],\n    },\n    {\n        date: \"2021/09/16\",\n        changes: [\"Updated to Patch 0.41.0\"],\n    },\n    {\n        date: \"2021/09/08\",\n        changes: [\"Changed percentage calculations\"],\n    },\n    {\n        date: \"2021/09/04\",\n        changes: [\n            \"Fixed Bandage/Coffee/Garlic images\",\n            \"Added new boxes for Temple + Dock\",\n            \"Changed Zoning for Archery Range\",\n        ],\n    },\n    {\n        date: \"2021/08\",\n        changes: [\"Created ERBS Loot Map\"],\n    },\n];\n\nfunction UpdateHistory() {\n    return (\n        <HistoryBox>\n            <HistoryTitle>Update History</HistoryTitle>\n            {historyData.map(({ date, changes }) => (\n                <>\n                    <ChangeDate>{date}</ChangeDate>\n                    <ChangesList>\n                        {changes.map((change) => (\n                            <ChangesListItem>{change}</ChangesListItem>\n                        ))}\n                    </ChangesList>\n                </>\n            ))}\n        </HistoryBox>\n    );\n}\n\nexport default UpdateHistory;\n","import UpdateHistory from \"./UpdateHistory\";\nexport default UpdateHistory;\n","import { createContext, useState } from \"react\";\n\nconst SettingsContext = createContext(null);\n\nexport const SettingsProvider = ({ children }) => {\n    const [settings, setSettings] = useState({\n        color: true,\n        numbers: true,\n        animals: false,\n        spawns: true,\n        collectables: true,\n    });\n\n    const toggleColor = () => {\n        setSettings({\n            ...settings,\n            color: !settings.color,\n        });\n    };\n\n    const toggleNumbers = () => {\n        setSettings({\n            ...settings,\n            numbers: !settings.numbers,\n        });\n    };\n\n    const toggleCollectables = () => {\n        setSettings({\n            ...settings,\n            collectables: !settings.collectables,\n        });\n    };\n\n    const toggleSpawns = () => {\n        setSettings({\n            ...settings,\n            spawns: !settings.spawns,\n        });\n    };\n\n    const toggleAnimals = () => {\n        setSettings({\n            ...settings,\n            animals: !settings.animals,\n        });\n    };\n\n    return (\n        <SettingsContext.Provider\n            value={{\n                settings,\n                toggleNumbers,\n                toggleColor,\n                toggleAnimals,\n                toggleSpawns,\n                toggleCollectables,\n            }}\n        >\n            {children}\n        </SettingsContext.Provider>\n    );\n};\n\nexport default SettingsContext;\n","import styled from \"styled-components\";\nimport { MapInteractionCSS } from \"react-map-interaction\";\nimport boxes from \"../../data/boxes.json\";\nimport animals from \"../../data/animals.json\";\nimport { useState, useContext } from \"react\";\nimport Modal from \"../Modal\";\nimport { device } from \"../../utils/device\";\nimport UpdateHistory from \"../UpdateHistory\";\nimport SettingsContext from \"../Context/SettingsContext\";\n\nexport const zoneColors = {\n    0: \"hsl(0,0%, 85%)\",\n    1: \"hsl(0, 100%, 45%)\",\n    2: \"hsl(55, 100%, 45%)\",\n    3: \"hsl(120, 100%, 45%)\",\n    4: \"hsl(200, 100%, 45%)\",\n    5: \"hsl(304, 100%, 45%)\",\n};\n\nconst StyledSvg = styled.svg`\n    width: 100%;\n    height: calc(100vh - 4px);\n    @media ${device.mobileLMax} {\n        height: calc(60vh - 4px);\n    }\n`;\n\nconst StyledText = styled.text`\n    fill: ${({ isColorEnabled, zone }) =>\n        isColorEnabled ? zoneColors[zone] : \"hsl(0, 0%, 75%)\"};\n    font-size: 10px;\n    font-family: Trebuchet MS, Lucida Grande, Lucida Sans Unicode, Lucida Sans,\n        Tahoma, sans-serif;\n    cursor: pointer;\n`;\n\nconst StyledCircle = styled.circle`\n    fill: ${({ isColorEnabled, zone }) =>\n        isColorEnabled ? zoneColors[zone] : \"hsl(0, 0%, 75%)\"};\n    cursor: pointer;\n    stroke-width: 0.2px;\n    stroke: hsl(0, 0%, 25%);\n`;\n\nconst SettingBox = styled.div`\n    position: absolute;\n    right: 1rem;\n    bottom: 1rem;\n    background-color: hsl(240, 5%, 30%);\n    color: hsl(0, 0%, 87%);\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    padding: 0.5rem 1rem;\n    border-radius: 0.25rem;\n    z-index: 2;\n`;\n\nconst CheckboxWithText = styled.div`\n    display: flex;\n    align-items: center;\n`;\n\nconst CheckboxText = styled.p`\n    margin-left: 0.25rem;\n`;\n\nconst Checkbox = styled.input``;\n\nconst MapDiv = styled.div`\n    position: relative;\n    flex-grow: 1;\n`;\n\nconst Credits = styled.div`\n    position: absolute;\n    color: hsl(0, 0%, 67%);\n    left: 0.5rem;\n    cursor: pointer;\n    z-index: 2;\n    bottom: 0.5rem;\n    :hover {\n        color: hsl(0, 0%, 87%);\n    }\n`;\n\nconst HistoryText = styled(Credits)`\n    top: 0.5rem;\n    bottom: auto;\n`;\n\nconst CreditsBox = styled.div`\n    width: 40rem;\n    max-width: 90vw;\n    padding: 2rem;\n    border-radius: 0.5rem;\n    background-color: hsl(240, 5%, 30%);\n    color: hsl(0, 0%, 87%);\n    display: flex;\n    flex-direction: column;\n    gap: 0.5rem;\n`;\n\nconst CreditLink = styled.a`\n    color: hsl(0, 0%, 87%);\n`;\n\nfunction BserMap({ setSelectedItem }) {\n    const { settings, toggleAnimals, toggleCollectables, toggleSpawns } =\n        useContext(SettingsContext);\n\n    const [isCreditsOpen, setIsCreditsOpen] = useState(false);\n    const [isHistoryOpen, setIsHistoryOpen] = useState(false);\n\n    return (\n        <MapDiv>\n            <Modal open={isCreditsOpen} onClose={() => setIsCreditsOpen(false)}>\n                <CreditsBox>\n                    <h3>Original Map Data Source</h3>\n                    <CreditLink\n                        href=\"https://media.discordapp.net/attachments/854879257549340680/879299030952316988/ClusterMap.png\"\n                        target=\"_blank\"\n                        rel=\"noopener noreferrer\"\n                    >\n                        Open Image\n                    </CreditLink>\n                    <p>\n                        Special thanks to the contributers: Wraith, Zorceress,\n                        Silvrr, LilyDango, KamLauBak, and YeetandSkeet\n                    </p>\n                    <h3>Created By MacTal</h3>\n                    <p>\n                        For suggestions or corrections, feel free to contact\n                        TheAsianLife#2560 on discord\n                    </p>\n                </CreditsBox>\n            </Modal>\n            <Modal open={isHistoryOpen} onClose={() => setIsHistoryOpen(false)}>\n                <UpdateHistory />\n            </Modal>\n            <Credits onClick={() => setIsCreditsOpen(true)}>Credits</Credits>\n            <HistoryText onClick={() => setIsHistoryOpen(true)}>\n                Last Updated: Patch 0.44.0\n            </HistoryText>\n            <SettingBox>\n                {/* <CheckboxWithText>\n                    <Checkbox\n                        type=\"checkbox\"\n                        checked={settings.collectables}\n                        onChange={toggleCollectables}\n                    ></Checkbox>\n                    <CheckboxText>Collectables</CheckboxText>\n                </CheckboxWithText>\n                <CheckboxWithText>\n                    <Checkbox\n                        type=\"checkbox\"\n                        checked={settings.spawns}\n                        onChange={toggleSpawns}\n                    ></Checkbox>\n                    <CheckboxText>Spawns</CheckboxText>\n                </CheckboxWithText> */}\n                <CheckboxWithText>\n                    <Checkbox\n                        type=\"checkbox\"\n                        checked={settings.animals}\n                        onChange={toggleAnimals}\n                    ></Checkbox>\n                    <CheckboxText>Animals</CheckboxText>\n                </CheckboxWithText>\n                {/* <CheckboxWithText>\n                    <Checkbox\n                        type=\"checkbox\"\n                        checked={settings.numbers}\n                        onChange={toggleNumbers}\n                    ></Checkbox>\n                    <CheckboxText>Numbers</CheckboxText>\n                </CheckboxWithText>\n                <CheckboxWithText>\n                    <Checkbox\n                        type=\"checkbox\"\n                        checked={settings.color}\n                        onChange={toggleColor}\n                    ></Checkbox>\n                    <CheckboxText>Colors</CheckboxText>\n                </CheckboxWithText> */}\n            </SettingBox>\n            <MapInteractionCSS maxScale={6} minScale={0.95} showControls={true}>\n                <StyledSvg\n                    xmlns=\"http://www.w3.org/2000/svg\"\n                    xmlnsXlink=\"http://www.w3.org/1999/xlink\"\n                    viewBox=\"0 0 772 887\"\n                >\n                    {/* <title>ZoneMapping</title> */}\n                    <g id=\"Layer_1\" data-name=\"Layer 1\">\n                        <image\n                            width=\"772\"\n                            height=\"887\"\n                            xlinkHref={\n                                process.env.PUBLIC_URL + \"/MiniMap_01.png\"\n                            }\n                        />\n                    </g>\n                    {settings.animals &&\n                        animals.map((animal) => (\n                            <image\n                                xlinkHref={\n                                    process.env.PUBLIC_URL +\n                                    `/images/animals/${animal.code}.png`\n                                }\n                                x={parseFloat(animal.coords[0]) - 25 / 2}\n                                y={parseFloat(animal.coords[1]) - 25 / 2}\n                                width={25}\n                                height={25}\n                            />\n                        ))}\n                    {boxes.map((box) =>\n                        settings.numbers ? (\n                            <StyledText\n                                transform={`translate(${box.coords[0]} ${box.coords[1]} )`}\n                                zone={box.zone}\n                                isColorEnabled={settings.color}\n                                onClick={() => {\n                                    setSelectedItem(box);\n                                }}\n                                onTouchEnd={() => {\n                                    setSelectedItem(box);\n                                }}\n                            >\n                                {box.quantity}\n                            </StyledText>\n                        ) : (\n                            <StyledCircle\n                                cx={parseFloat(box.coords[0]) + 3}\n                                cy={parseFloat(box.coords[1]) - 3}\n                                r=\"2.5\"\n                                isColorEnabled={settings.color}\n                                zone={box.zone}\n                                onClick={() => {\n                                    setSelectedItem(box);\n                                }}\n                            ></StyledCircle>\n                        )\n                    )}\n                </StyledSvg>\n            </MapInteractionCSS>\n        </MapDiv>\n    );\n}\n\nexport default BserMap;\n","import styled from \"styled-components\";\nimport areas from \"../../data/areas.json\";\nimport areaItemCount from \"../../data/areaItemCount.json\";\nimport BserItem from \"../BserItem/BserItem\";\nimport boxes from \"../../data/boxes.json\";\nimport cdf from \"@stdlib/stats-base-dists-hypergeometric-cdf\";\nimport pmf from \"@stdlib/stats-base-dists-hypergeometric-pmf\";\nimport { zoneColors } from \"../BserMap/BserMap\";\nimport Tippy from \"@tippyjs/react\";\nimport { AiOutlineQuestionCircle } from \"react-icons/ai\";\nimport \"tippy.js/dist/tippy.css\";\nimport { device } from \"../../utils/device\";\nimport SettingsContext from \"../Context/SettingsContext\";\nimport { useContext } from \"react\";\n\nconst SidebarBox = styled.div`\n    width: 25%;\n    background-color: hsl(240, 5%, 30%);\n    display: flex;\n    position: relative;\n    padding: 0px 20px;\n    flex-direction: column;\n    align-items: start;\n    height: 100vh;\n    overflow-y: auto;\n\n    @media ${device.mobileLMax} {\n        width: 100%;\n        height: 40vh;\n    }\n`;\n\nconst Header = styled.h1`\n    margin: 0.8rem 0px;\n    color: hsl(0, 0%, 87%);\n`;\n\nconst Text = styled.p`\n    font-size: 1rem;\n    margin: 0.2rem 0px;\n    color: hsl(0, 0%, 60%);\n`;\n\nconst Subtitle = styled.h2`\n    margin: 0.4rem 0px;\n    color: ${({ color }) => color || \"hsl(0, 0%,87%)\"};\n`;\n\nconst ItemHolderBox = styled.div`\n    margin-bottom: 0.2rem;\n    display: flex;\n    flex-wrap: wrap;\n`;\n\nconst ItemWithPercentages = styled.div`\n    display: flex;\n    flex-direction: column;\n    align-items: start;\n`;\n\nconst SubSubTitle = styled.h3`\n    /* font-size: 0.8rem; */\n    color: hsl(0, 0%, 60%);\n`;\n\nconst SubSubtitleWithQuestionTooltip = styled.div`\n    margin: 0.4rem 0;\n    display: flex;\n    align-items: center;\n`;\n\nconst QuestionTooltip = styled(AiOutlineQuestionCircle)`\n    margin-left: 2px;\n    color: hsl(0, 0%, 60%);\n`;\n\nconst Info = styled.h3`\n    margin: 0.4rem 0px;\n    color: hsl(0, 0%, 87%);\n`;\n\nfunction SideBar({ selectedItem }) {\n    const { settings } = useContext(SettingsContext);\n\n    const area = areas[selectedItem.area];\n    const itemCount = areaItemCount[selectedItem.area];\n    let areaItem = 0;\n    const zoneItem = [];\n    let mandatoryCount = 0;\n    let leftoverCount = 0;\n\n    for (const box of boxes) {\n        if (box.area !== selectedItem.area) continue;\n        areaItem += box.quantity;\n\n        zoneItem[box.zone] = (zoneItem[box.zone] || 0) + box.quantity;\n    }\n\n    for (const item in itemCount) {\n        const quantity = itemCount[item];\n\n        mandatoryCount += Math.floor(quantity / 5);\n        leftoverCount += quantity % 5;\n    }\n\n    const zoneLeftovers = zoneItem.map((zone, index) => {\n        if (index === 0) return zone;\n        return zone - mandatoryCount;\n    });\n\n    const zoneName = selectedItem.zone\n        ? `Zone ${selectedItem.zone}`\n        : `Zoneless`;\n\n    return (\n        <SidebarBox>\n            <Header>ERBS Map</Header>\n            {selectedItem.area ? (\n                selectedItem.area && (\n                    <>\n                        <Subtitle>{area.englishName}</Subtitle>\n                        <Text>Items: {areaItem}</Text>\n                        <ItemHolderBox>\n                            {Object.keys(itemCount).map((item) => {\n                                const count = itemCount[item];\n\n                                return (\n                                    <BserItem item={item} quantity={count} />\n                                );\n                            })}\n                        </ItemHolderBox>\n                        {/* <Text>Items per zone: {mandatoryCount}</Text>\n                            <ItemHolderBox>\n                                {Object.keys(itemCount).map((item) => {\n                                    const count = Math.floor(itemCount[item] / 5);\n        \n                                    if (count === 0) return <></>;\n        \n                                    return <BserItem item={item} quantity={count} />;\n                                })}\n                            </ItemHolderBox>\n                            <Text>Leftovers: {leftoverCount}</Text>\n                            <ItemHolderBox>\n                                {Object.keys(itemCount).map((item) => {\n                                    const count = itemCount[item] % 5;\n        \n                                    if (count === 0) return <></>;\n        \n                                    return <BserItem item={item} quantity={count} />;\n                                })}\n                            </ItemHolderBox> */}\n                        <Subtitle\n                            color={\n                                settings.color\n                                    ? zoneColors[selectedItem.zone]\n                                    : null\n                            }\n                        >\n                            {zoneName}\n                        </Subtitle>\n                        {/* <Subtitle>\n                            {selectedItem.coords[0] +\n                                \", \" +\n                                selectedItem.coords[1]}\n                        </Subtitle> */}\n\n                        {selectedItem.zone ? (\n                            <>\n                                <Text>\n                                    Items in Zone: {zoneItem[selectedItem.zone]}\n                                </Text>\n                                <Text>\n                                    Extras: {zoneLeftovers[selectedItem.zone]}\n                                </Text>\n\n                                <SubSubtitleWithQuestionTooltip>\n                                    <SubSubTitle>\n                                        Item Chance in Zone\n                                    </SubSubTitle>\n                                    <Tippy\n                                        arrow={true}\n                                        content={\n                                            <span>\n                                                All percentages are{\" \"}\n                                                <b>estimates</b> due to the\n                                                complex nature of the boxes.\n                                                Zones with higher number of\n                                                boxes will have higher chances\n                                                than the estimate\n                                            </span>\n                                        }\n                                    >\n                                        <div>\n                                            <QuestionTooltip />\n                                        </div>\n                                    </Tippy>\n                                </SubSubtitleWithQuestionTooltip>\n\n                                <ItemHolderBox>\n                                    {Object.keys(itemCount).map((item) => {\n                                        const count = itemCount[item] % 5;\n\n                                        const mandatory =\n                                            selectedItem.zone !== 0\n                                                ? Math.floor(\n                                                      itemCount[item] / 5\n                                                  )\n                                                : 0;\n\n                                        const chances = {};\n\n                                        if (mandatory > 0)\n                                            chances[mandatory] = 100;\n\n                                        let currentExtra = 0;\n\n                                        while (true) {\n                                            currentExtra++;\n                                            const chance =\n                                                1 -\n                                                cdf(\n                                                    currentExtra,\n                                                    leftoverCount,\n                                                    count,\n                                                    zoneLeftovers[\n                                                        selectedItem.zone\n                                                    ]\n                                                ) +\n                                                pmf(\n                                                    currentExtra,\n                                                    leftoverCount,\n                                                    count,\n                                                    zoneLeftovers[\n                                                        selectedItem.zone\n                                                    ]\n                                                );\n\n                                            if (\n                                                chance <= 0.01 ||\n                                                currentExtra >= 4\n                                            )\n                                                break;\n\n                                            chances[currentExtra + mandatory] =\n                                                (chance * 100).toFixed(0);\n                                        }\n\n                                        return (\n                                            <ItemWithPercentages>\n                                                <BserItem item={item} />\n                                                {Object.keys(chances).map(\n                                                    (quantity) => {\n                                                        return (\n                                                            <Text>\n                                                                {quantity}:\n                                                                {\n                                                                    chances[\n                                                                        quantity\n                                                                    ]\n                                                                }\n                                                                %\n                                                            </Text>\n                                                        );\n                                                    }\n                                                )}\n                                            </ItemWithPercentages>\n                                        );\n                                    })}\n                                </ItemHolderBox>\n                            </>\n                        ) : (\n                            <>\n                                <Text>\n                                    Leftovers: {zoneItem[selectedItem.zone]}\n                                </Text>\n                                <SubSubtitleWithQuestionTooltip>\n                                    <SubSubTitle>\n                                        Item Chance in Selected Box\n                                    </SubSubTitle>\n                                    <Tippy\n                                        arrow={true}\n                                        content={\n                                            <span>\n                                                All percentages are{\" \"}\n                                                <b>estimates</b> due to the\n                                                complex nature of the boxes.\n                                                Expect the chance to be higher\n                                                than listed.\n                                            </span>\n                                        }\n                                    >\n                                        <div>\n                                            <QuestionTooltip />\n                                        </div>\n                                    </Tippy>\n                                </SubSubtitleWithQuestionTooltip>\n                                <ItemHolderBox>\n                                    {Object.keys(itemCount).map((item) => {\n                                        const count = itemCount[item] % 5;\n\n                                        if (count === 0) return <></>;\n\n                                        const chances = {};\n\n                                        let currentExtra = 0;\n\n                                        while (true) {\n                                            currentExtra++;\n                                            const chance =\n                                                1 -\n                                                cdf(\n                                                    currentExtra,\n                                                    leftoverCount,\n                                                    count,\n                                                    selectedItem.quantity\n                                                ) +\n                                                pmf(\n                                                    currentExtra,\n                                                    leftoverCount,\n                                                    count,\n                                                    selectedItem.quantity\n                                                );\n\n                                            if (\n                                                chance <= 0.01 ||\n                                                currentExtra >= 2\n                                            )\n                                                break;\n\n                                            chances[currentExtra] = (\n                                                chance * 100\n                                            ).toFixed(0);\n                                        }\n\n                                        return (\n                                            <ItemWithPercentages>\n                                                <BserItem item={item} />\n                                                {Object.keys(chances).map(\n                                                    (quantity) => {\n                                                        return (\n                                                            <Text>\n                                                                {quantity}:\n                                                                {\n                                                                    chances[\n                                                                        quantity\n                                                                    ]\n                                                                }\n                                                                %\n                                                            </Text>\n                                                        );\n                                                    }\n                                                )}\n                                            </ItemWithPercentages>\n                                        );\n                                    })}\n                                </ItemHolderBox>\n                            </>\n                        )}\n                    </>\n                )\n            ) : (\n                <Info>Select a box to start</Info>\n            )}\n        </SidebarBox>\n    );\n}\n\nexport default SideBar;\n","import SideBar from \"./SideBar\";\nexport default SideBar;\n","import BserMap from \"./BserMap\";\nexport default BserMap;\n","import SideBar from \"../SideBar\";\nimport BserMap from \"../BserMap\";\nimport styled from \"styled-components\";\nimport { useState } from \"react\";\nimport { device } from \"../../utils/device\";\nimport { SettingsProvider } from \"../Context/SettingsContext\";\n\nconst Wrapper = styled.div`\n    display: flex;\n    text-align: center;\n\n    @media ${device.mobileLMax} {\n        flex-direction: column;\n    }\n`;\n\nfunction MapSideBarWrapper() {\n    const [selectedItem, setSelectedItem] = useState({});\n\n    return (\n        <SettingsProvider>\n            <Wrapper>\n                <BserMap\n                    selectedItem={selectedItem}\n                    setSelectedItem={setSelectedItem}\n                />\n                <SideBar selectedItem={selectedItem} />\n            </Wrapper>\n        </SettingsProvider>\n    );\n}\n\nexport default MapSideBarWrapper;\n","import MapSideBarWrapper from \"./MapSideBarWrapper\";\nexport default MapSideBarWrapper;\n","import styled from \"styled-components\";\nimport MapSideBarWrapper from \"./components/MapSideBarWrapper\";\n\nconst Background = styled.div`\n    background-color: hsl(0, 0%, 17.5%);\n`;\n\nfunction App() {\n    return (\n        <Background>\n            <MapSideBarWrapper />\n        </Background>\n    );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}