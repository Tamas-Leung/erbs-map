{"version":3,"sources":["components/BserItem/BserItem.jsx","components/Modal/Modal.jsx","components/Modal/index.jsx","utils/device.js","components/UpdateHistory/UpdateHistory.jsx","components/UpdateHistory/index.jsx","components/BserMap/BserMap.jsx","components/SideBar/SideBar.jsx","components/SideBar/index.jsx","components/BserMap/index.jsx","components/MapSideBarWrapper/MapSideBarWrapper.jsx","components/MapSideBarWrapper/index.jsx","App.js","reportWebVitals.js","index.js"],"names":["GradeColor","Common","fill","StyledImg","styled","img","grade","border","AltTextFontWrapper","span","ItemBackground","div","size","ImageColorBackground","focus","theme","colors","secondary","Item","QuantityText","BserItem","item","quantity","itemName","codeToName","imgSrc","process","src","alt","StyledModal","Overlay","Modal","open","children","onClose","ReactDom","createPortal","onClick","document","getElementById","device","mobileS","mobileM","mobileL","tablet","laptop","laptopL","desktop","desktopL","mobileSMax","mobileMMax","mobileLMax","tabletMax","laptopMax","laptopLMax","desktopMax","desktopLMax","HistoryBox","HistoryTitle","h2","ChangeDate","ChangesList","ul","ChangesListItem","li","historyData","date","changes","UpdateHistory","map","change","zoneColors","StyledSvg","svg","StyledText","text","isColorEnabled","zone","StyledCircle","circle","SettingBox","CheckboxWithText","CheckboxText","p","Checkbox","input","MapDiv","Credits","HistoryText","CreditsBox","CreditLink","a","BserMap","setSelectedItem","isNumberEnabled","setColorEnabled","setNumberEnabled","useState","isCreditsOpen","setIsCreditsOpen","isHistoryOpen","setIsHistoryOpen","href","target","rel","type","checked","onChange","maxScale","minScale","showControls","xmlns","xmlnsXlink","viewBox","id","width","height","xlinkHref","boxes","box","transform","coords","onTouchEnd","cx","parseFloat","cy","r","SidebarBox","Header","h1","Text","Subtitle","color","ItemHolderBox","ItemWithPercentages","SubSubTitle","h3","SubSubtitleWithQuestionTooltip","QuestionTooltip","AiOutlineQuestionCircle","Info","SideBar","selectedItem","area","areas","itemCount","areaItemCount","areaItem","zoneItem","mandatoryCount","leftoverCount","Math","floor","zoneLeftovers","index","zoneName","englishName","Object","keys","count","arrow","content","mandatory","chances","currentExtra","chance","cdf","pmf","toFixed","Wrapper","MapSideBarWrapper","Background","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"wOAGMA,EAAa,CACfC,OAAQ,CACJC,KAAM,8DAIRC,EAAYC,IAAOC,IAAV,kNAEwB,gBAAGC,EAAH,EAAGA,MAAH,OAAeN,EAAWM,GAAOC,UACvC,gBAAGD,EAAH,EAAGA,MAAH,OAAeN,EAAWM,GAAOC,UACjC,gBAAGD,EAAH,EAAGA,MAAH,OAAeN,EAAWM,GAAOC,UAC5B,gBAAGD,EAAH,EAAGA,MAAH,OAC9BN,EAAWM,GAAOC,UAGpBC,EAAqBJ,IAAOK,KAAV,uEAKlBC,EAAiBN,IAAOO,IAAV,qOAQN,kBAAwB,UAAxB,EAAGC,KAA+B,SAAW,UAC9C,kBAAwB,UAAxB,EAAGA,KAA+B,SAAW,YAGpDC,EAAuBT,YAAOM,EAAPN,CAAH,iMACR,gBAAGE,EAAH,EAAGA,MAAH,OAAeN,EAAWM,GAAOJ,QAElC,gBAAGI,EAAH,EAAGA,MAAH,OAAeN,EAAWM,GAAOC,UAGpC,gBAAGO,EAAH,EAAGA,MAAOC,EAAV,EAAUA,MAAV,OACND,EAAK,UAAMC,EAAMC,OAAOC,UAAnB,+BAGPC,EAAOd,IAAOO,IAAV,wGAMJQ,EAAef,IAAOO,IAAV,gTA+BHS,I,IAAAA,EAjBf,YAA6C,IAAzBC,EAAwB,EAAxBA,KAAMC,EAAkB,EAAlBA,SAAUV,EAAQ,EAARA,KAC5BW,EAAWC,EAAWH,GAEtBI,EAASC,kBAA4CL,EAAO,OAEhE,OACI,cAACH,EAAD,UACI,eAACL,EAAD,CAAsBP,MAAO,SAAUM,KAAMA,EAA7C,UACI,cAACJ,EAAD,UACI,cAACL,EAAD,CAAWG,MAAO,SAAUqB,IAAKF,EAAQG,IAAKL,MAEjDD,GAAY,cAACH,EAAD,UAAeG,U,kDCzEtCO,EAAczB,IAAOO,IAAV,4IAQXmB,EAAU1B,IAAOO,IAAV,6KCVEoB,I,UAAAA,EDoBA,YAA6C,IAA5BC,EAA2B,EAA3BA,KAAMC,EAAqB,EAArBA,SAAUC,EAAW,EAAXA,QAC5C,OAAKF,EAEEG,IAASC,aACZ,qCACI,cAACN,EAAD,CAASO,QAASH,IAClB,cAACL,EAAD,UAAcI,OAElBK,SAASC,eAAe,SAPV,MEtBT3B,EACA,QADAA,EAEA,QAFAA,EAGA,QAHAA,EAID,QAJCA,EAKD,SALCA,EAMA,SANAA,EAOA,SAGA4B,EAAS,CAClBC,QAAQ,eAAD,OAAiB7B,EAAjB,KACP8B,QAAQ,eAAD,OAAiB9B,EAAjB,KACP+B,QAAQ,eAAD,OAAiB/B,EAAjB,KACPgC,OAAO,eAAD,OAAiBhC,EAAjB,KACNiC,OAAO,eAAD,OAAiBjC,EAAjB,KACNkC,QAAQ,eAAD,OAAiBlC,EAAjB,KACPmC,QAAQ,eAAD,OAAiBnC,EAAjB,KACPoC,SAAS,eAAD,OAAiBpC,EAAjB,KACRqC,WAAW,eAAD,OAAiBrC,EAAjB,KACVsC,WAAW,eAAD,OAAiBtC,EAAjB,KACVuC,WAAW,eAAD,OAAiBvC,EAAjB,KACVwC,UAAU,eAAD,OAAiBxC,EAAjB,KACTyC,UAAU,eAAD,OAAiBzC,EAAjB,KACT0C,WAAW,eAAD,OAAiB1C,EAAjB,KACV2C,WAAW,eAAD,OAAiB3C,EAAjB,KACV4C,YAAY,eAAD,OAAiB5C,EAAjB,MCxBT6C,EAAarD,IAAOO,IAAV,6SAcV+C,GAAetD,IAAOuD,GAAV,oDAIZC,GAAaxD,IAAOO,IAAV,mDAIVkD,GAAczD,IAAO0D,GAAV,sDAIXC,GAAkB3D,IAAO4D,GAAV,oDAIfC,GAAc,CAChB,CACIC,KAAM,aACNC,QAAS,CAAC,4BAEd,CACID,KAAM,aACNC,QAAS,CAAC,4BAEd,CACID,KAAM,aACNC,QAAS,CAAC,oCAEd,CACID,KAAM,aACNC,QAAS,CACL,qCACA,oCACA,qCAGR,CACID,KAAM,UACNC,QAAS,CAAC,2BAsBHC,I,oCC5EAA,GD0Df,WACI,OACI,eAACX,EAAD,WACI,cAACC,GAAD,6BACCO,GAAYI,KAAI,gBAAGH,EAAH,EAAGA,KAAMC,EAAT,EAASA,QAAT,OACb,qCACI,cAACP,GAAD,UAAaM,IACb,cAACL,GAAD,UACKM,EAAQE,KAAI,SAACC,GAAD,OACT,cAACP,GAAD,UAAkBO,mBE5DjCC,GAAa,CACtB,EAAG,iBACH,EAAG,oBACH,EAAG,qBACH,EAAG,sBACH,EAAG,sBACH,EAAG,uBAGDC,GAAYpE,IAAOqE,IAAV,2IAGFjC,EAAOW,YAKduB,GAAatE,IAAOuE,KAAV,wMACJ,gBAAGC,EAAH,EAAGA,eAAgBC,EAAnB,EAAmBA,KAAnB,OACJD,EAAiBL,GAAWM,GAAQ,qBAOtCC,GAAe1E,IAAO2E,OAAV,4HACN,gBAAGH,EAAH,EAAGA,eAAgBC,EAAnB,EAAmBA,KAAnB,OACJD,EAAiBL,GAAWM,GAAQ,qBAMtCG,GAAa5E,IAAOO,IAAV,2TAcVsE,GAAmB7E,IAAOO,IAAV,4EAKhBuE,GAAe9E,IAAO+E,EAAV,yDAIZC,GAAWhF,IAAOiF,MAAV,4BAERC,GAASlF,IAAOO,IAAV,0EAKN4E,GAAUnF,IAAOO,IAAV,yNAYP6E,GAAcpF,YAAOmF,GAAPnF,CAAH,mEAKXqF,GAAarF,IAAOO,IAAV,iQAYV+E,GAAatF,IAAOuF,EAAV,2DAoHDC,I,8BAAAA,GAhHf,YAMI,IALAC,EAKD,EALCA,gBACAC,EAID,EAJCA,gBACAlB,EAGD,EAHCA,eACAmB,EAED,EAFCA,gBACAC,EACD,EADCA,iBAEA,EAA0CC,oBAAS,GAAnD,mBAAOC,EAAP,KAAsBC,EAAtB,KACA,EAA0CF,oBAAS,GAAnD,mBAAOG,EAAP,KAAsBC,EAAtB,KAEA,OACI,eAACf,GAAD,WACI,cAAC,EAAD,CAAOtD,KAAMkE,EAAehE,QAAS,kBAAMiE,GAAiB,IAA5D,SACI,eAACV,GAAD,WACI,0DACA,cAACC,GAAD,CACIY,KAAK,gGACLC,OAAO,SACPC,IAAI,sBAHR,wBAOA,sIAIA,mDACA,uHAMR,cAAC,EAAD,CAAOxE,KAAMoE,EAAelE,QAAS,kBAAMmE,GAAiB,IAA5D,SACI,cAAC,GAAD,MAEJ,cAACd,GAAD,CAASlD,QAAS,kBAAM8D,GAAiB,IAAzC,qBACA,cAACX,GAAD,CAAanD,QAAS,kBAAMgE,GAAiB,IAA7C,wCAGA,eAACrB,GAAD,WACI,eAACC,GAAD,WACI,cAACG,GAAD,CACIqB,KAAK,WACLC,QAASZ,EACTa,SAAU,WACNX,GAAkBF,MAG1B,cAACZ,GAAD,yBAEJ,eAACD,GAAD,WACI,cAACG,GAAD,CACIqB,KAAK,WACLC,QAAS9B,EACT+B,SAAU,WACNZ,GAAiBnB,MAGzB,cAACM,GAAD,2BAGR,cAAC,oBAAD,CAAmB0B,SAAU,EAAGC,SAAU,IAAMC,cAAc,EAA9D,SACI,eAACtC,GAAD,CACIuC,MAAM,6BACNC,WAAW,+BACXC,QAAQ,cAHZ,UAMI,mBAAGC,GAAG,UAAU,YAAU,UAA1B,SACI,uBACIC,MAAM,MACNC,OAAO,MACPC,UACI3F,uBAIX4F,EAAMjD,KAAI,SAACkD,GAAD,OACPzB,EACI,cAACpB,GAAD,CACI8C,UAAS,oBAAeD,EAAIE,OAAO,GAA1B,YAAgCF,EAAIE,OAAO,GAA3C,MACT5C,KAAM0C,EAAI1C,KACVD,eAAgBA,EAChBvC,QAAS,WACLwD,EAAgB0B,IAEpBG,WAAY,WACR7B,EAAgB0B,IARxB,SAWKA,EAAIjG,WAGT,cAACwD,GAAD,CACI6C,GAAIC,WAAWL,EAAIE,OAAO,IAAM,EAChCI,GAAID,WAAWL,EAAIE,OAAO,IAAM,EAChCK,EAAE,MACFlD,eAAgBA,EAChBC,KAAM0C,EAAI1C,KACVxC,QAAS,WACLwD,EAAgB0B,kB,kBCjM9CQ,I,OAAa3H,IAAOO,IAAV,sUAWH6B,EAAOW,aAMd6E,GAAS5H,IAAO6H,GAAV,oFAKNC,GAAO9H,IAAO+E,EAAV,0GAMJgD,GAAW/H,IAAOuD,GAAV,wEAED,qBAAGyE,OAAqB,oBAG/BC,GAAgBjI,IAAOO,IAAV,oGAMb2H,GAAsBlI,IAAOO,IAAV,wGAMnB4H,GAAcnI,IAAOoI,GAAV,yFAKXC,GAAiCrI,IAAOO,IAAV,mGAM9B+H,GAAkBtI,YAAOuI,KAAPvI,CAAH,kFAKfwI,GAAOxI,IAAOoI,GAAV,oFA4RKK,I,GCrWAA,GD8Ef,YAAoD,IAAD,EAAhCC,EAAgC,EAAhCA,aAAclE,EAAkB,EAAlBA,eACvBmE,EAAOC,EAAMF,EAAaC,MAC1BE,EAAYC,EAAcJ,EAAaC,MACzCI,EAAW,EACTC,EAAW,GACbC,EAAiB,EACjBC,EAAgB,EAN2B,cAQ7BhC,GAR6B,IAQ/C,2BAAyB,CAAC,IAAfC,EAAc,QACjBA,EAAIwB,OAASD,EAAaC,OAC9BI,GAAY5B,EAAIjG,SAEhB8H,EAAS7B,EAAI1C,OAASuE,EAAS7B,EAAI1C,OAAS,GAAK0C,EAAIjG,WAZV,8BAe/C,IAAK,IAAMD,KAAQ4H,EAAW,CAC1B,IAAM3H,EAAW2H,EAAU5H,GAE3BgI,GAAkBE,KAAKC,MAAMlI,EAAW,GACxCgI,GAAiBhI,EAAW,EAGhC,IAAMmI,EAAgBL,EAAS/E,KAAI,SAACQ,EAAM6E,GACtC,OAAc,IAAVA,EAAoB7E,EACjBA,EAAOwE,KAGZM,EAAWb,EAAajE,KAAb,eACHiE,EAAajE,MADV,WAIjB,OACI,eAACkD,GAAD,WACI,cAACC,GAAD,uBACCc,EAAaC,KACVD,EAAaC,MACT,qCACI,cAACZ,GAAD,UAAWY,EAAKa,cAChB,eAAC1B,GAAD,qBAAciB,KACd,cAACd,GAAD,UACKwB,OAAOC,KAAKb,GAAW5E,KAAI,SAAChD,GACzB,IAAM0I,EAAQd,EAAU5H,GAExB,OACI,cAAC,EAAD,CAAUA,KAAMA,EAAMC,SAAUyI,SAwB5C,cAAC5B,GAAD,CACIC,MACIxD,EACML,GAAWuE,EAAajE,MACxB,KAJd,SAOK8E,IAGJb,EAAajE,KACV,qCACI,eAACqD,GAAD,6BACoBkB,EAASN,EAAajE,SAE1C,eAACqD,GAAD,sBACauB,EAAcX,EAAajE,SAGxC,eAAC4D,GAAD,WACI,cAACF,GAAD,kCAGA,cAAC,KAAD,CACIyB,OAAO,EACPC,QACI,uDACwB,IACpB,0CAFJ,2HAHR,SAaI,8BACI,cAACvB,GAAD,WAKZ,cAACL,GAAD,UACKwB,OAAOC,KAAKb,GAAW5E,KAAI,SAAChD,GACzB,IAAM0I,EAAQd,EAAU5H,GAAQ,EAE1B6I,EACoB,IAAtBpB,EAAajE,KACP0E,KAAKC,MACDP,EAAU5H,GAAQ,GAEtB,EAEJ8I,EAAU,GAEZD,EAAY,IACZC,EAAQD,GAAa,KAIzB,IAFA,IAAIE,EAAe,IAEN,CACTA,IACA,IAAMC,EACF,EACAC,IACIF,EACAd,EACAS,EACAN,EACIX,EAAajE,OAGrB0F,IACIH,EACAd,EACAS,EACAN,EACIX,EAAajE,OAIzB,GACIwF,GAAU,KACVD,GAAgB,EAEhB,MAEJD,EAAQC,EAAeF,IACT,IAATG,GAAcG,QAAQ,GAG/B,OACI,eAAClC,GAAD,WACI,cAAC,EAAD,CAAUjH,KAAMA,IACfwI,OAAOC,KAAKK,GAAS9F,KAClB,SAAC/C,GACG,OACI,eAAC4G,GAAD,WACK5G,EADL,IAGQ6I,EACI7I,GAJZ,qBAkBhC,qCACI,eAAC4G,GAAD,yBACgBkB,EAASN,EAAajE,SAEtC,eAAC4D,GAAD,WACI,cAACF,GAAD,0CAGA,cAAC,KAAD,CACIyB,OAAO,EACPC,QACI,uDACwB,IACpB,0CAFJ,0FAHR,SAYI,8BACI,cAACvB,GAAD,WAIZ,cAACL,GAAD,UACKwB,OAAOC,KAAKb,GAAW5E,KAAI,SAAChD,GACzB,IAAM0I,EAAQd,EAAU5H,GAAQ,EAEhC,GAAc,IAAV0I,EAAa,OAAO,6BAMxB,IAJA,IAAMI,EAAU,GAEZC,EAAe,IAEN,CACTA,IACA,IAAMC,EACF,EACAC,IACIF,EACAd,EACAS,EACAjB,EAAaxH,UAEjBiJ,IACIH,EACAd,EACAS,EACAjB,EAAaxH,UAGrB,GACI+I,GAAU,KACVD,GAAgB,EAEhB,MAEJD,EAAQC,IACK,IAATC,GACFG,QAAQ,GAGd,OACI,eAAClC,GAAD,WACI,cAAC,EAAD,CAAUjH,KAAMA,IACfwI,OAAOC,KAAKK,GAAS9F,KAClB,SAAC/C,GACG,OACI,eAAC4G,GAAD,WACK5G,EADL,IAGQ6I,EACI7I,GAJZ,wBAqB5C,cAACsH,GAAD,wCE/VDhD,MCKT6E,GAAUrK,IAAOO,IAAV,sIAIA6B,EAAOW,YA4BLuH,I,GCrCAA,GDcf,WACI,MAAwCzE,mBAAS,IAAjD,mBAAO6C,EAAP,KAAqBjD,EAArB,KACA,EAA0CI,oBAAS,GAAnD,mBAAOrB,EAAP,KAAuBmB,EAAvB,KACA,EAA4CE,oBAAS,GAArD,mBAAOH,EAAP,KAAwBE,EAAxB,KAEA,OACI,eAACyE,GAAD,WACI,cAAC,GAAD,CACI3B,aAAcA,EACdjD,gBAAiBA,EACjBjB,eAAgBA,EAChBkB,gBAAiBA,EACjBC,gBAAiBA,EACjBC,iBAAkBA,IAEtB,cAAC,GAAD,CACI8C,aAAcA,EACdlE,eAAgBA,QE7B1B+F,GAAavK,IAAOO,IAAV,wEAYDiK,OARf,WACI,OACI,cAACD,GAAD,UACI,cAAC,GAAD,OCEGE,GAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACL,cAAC,IAAMC,WAAP,UACI,cAAC,GAAD,MAEJlJ,SAASC,eAAe,SAM5BsI,M","file":"static/js/main.78a3e01f.chunk.js","sourcesContent":["import styled from \"styled-components\";\nimport codeToName from \"../../data/codeToName.json\";\n\nconst GradeColor = {\n    Common: {\n        fill: \"linear-gradient(hsla(0, 0%, 50%, 1), hsla(0, 0%, 60%, 1))\",\n    },\n};\n\nconst StyledImg = styled.img`\n    height: 100%;\n    /* filter: drop-shadow(1px 1px 0 ${({ grade }) => GradeColor[grade].border})\n        drop-shadow(-1px 1px 0 ${({ grade }) => GradeColor[grade].border})\n        drop-shadow(1px -1px 0 ${({ grade }) => GradeColor[grade].border})\n        drop-shadow(-0.1px -0.1px 0 ${({ grade }) =>\n        GradeColor[grade].border}); */\n`;\n\nconst AltTextFontWrapper = styled.span`\n    height: 100%;\n    font-size: 0.6rem;\n`;\n\nconst ItemBackground = styled.div`\n    border-radius: 1px;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    padding: 2px;\n    border-radius: 3px;\n    margin: 0.1rem;\n    height: ${({ size }) => (size === \"small\" ? \"1.5rem\" : \"2rem\")};\n    width: ${({ size }) => (size === \"small\" ? \"2.7rem\" : \"3.6rem\")};\n`;\n\nconst ImageColorBackground = styled(ItemBackground)`\n    background: ${({ grade }) => GradeColor[grade].fill};\n    position: relative;\n    /* border: ${({ grade }) => GradeColor[grade].border} solid 2px; */\n    /* border-radius: 3px; */\n    background-clip: padding-box;\n    border: ${({ focus, theme }) =>\n        focus ? `${theme.colors.secondary} 2px solid` : `transparent`};\n`;\n\nconst Item = styled.div`\n    display: flex;\n    align-items: center;\n    justify-content: center;\n`;\n\nconst QuantityText = styled.div`\n    position: absolute;\n    bottom: 0;\n    right: 0;\n    background-color: hsl(0, 0%, 17.5%);\n    color: hsl(0, 0%, 87%);\n    padding: 0 0.2rem;\n    font-size: 0.9rem;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    border-radius: 3px;\n`;\n\nfunction BserItem({ item, quantity, size }) {\n    let itemName = codeToName[item];\n\n    let imgSrc = process.env.PUBLIC_URL + \"/images/items/\" + item + \".png\";\n\n    return (\n        <Item>\n            <ImageColorBackground grade={\"Common\"} size={size}>\n                <AltTextFontWrapper>\n                    <StyledImg grade={\"Common\"} src={imgSrc} alt={itemName} />\n                </AltTextFontWrapper>\n                {quantity && <QuantityText>{quantity}</QuantityText>}\n            </ImageColorBackground>\n        </Item>\n    );\n}\n\nexport default BserItem;\n","import ReactDom from \"react-dom\";\nimport styled from \"styled-components\";\n\nconst StyledModal = styled.div`\n    position: fixed;\n    top: 50%;\n    left: 50%;\n    transform: translate(-50%, -50%);\n    z-index: 1000;\n`;\n\nconst Overlay = styled.div`\n    position: fixed;\n    top: 0;\n    left: 0;\n    right: 0;\n    bottom: 0;\n    background-color: hsla(0, 0%, 0%, 0.3);\n    z-index: 1000;\n`;\n\nexport default function Modal({ open, children, onClose }) {\n    if (!open) return null;\n\n    return ReactDom.createPortal(\n        <>\n            <Overlay onClick={onClose} />\n            <StyledModal>{children}</StyledModal>\n        </>,\n        document.getElementById(\"root\")\n    );\n}\n","import Modal from \"./Modal\";\nexport default Modal;\n","export const size = {\n    mobileS: \"320px\",\n    mobileM: \"375px\",\n    mobileL: \"425px\",\n    tablet: \"768px\",\n    laptop: \"1024px\",\n    laptopL: \"1440px\",\n    desktop: \"2560px\",\n};\n\nexport const device = {\n    mobileS: `(min-width: ${size.mobileS})`,\n    mobileM: `(min-width: ${size.mobileM})`,\n    mobileL: `(min-width: ${size.mobileL})`,\n    tablet: `(min-width: ${size.tablet})`,\n    laptop: `(min-width: ${size.laptop})`,\n    laptopL: `(min-width: ${size.laptopL})`,\n    desktop: `(min-width: ${size.desktop})`,\n    desktopL: `(min-width: ${size.desktop})`,\n    mobileSMax: `(max-width: ${size.mobileS})`,\n    mobileMMax: `(max-width: ${size.mobileM})`,\n    mobileLMax: `(max-width: ${size.mobileL})`,\n    tabletMax: `(max-width: ${size.tablet})`,\n    laptopMax: `(max-width: ${size.laptop})`,\n    laptopLMax: `(max-width: ${size.laptopL})`,\n    desktopMax: `(max-width: ${size.desktop})`,\n    desktopLMax: `(max-width: ${size.desktop})`,\n};\n","import styled from \"styled-components\";\n\nconst HistoryBox = styled.div`\n    width: 40rem;\n    max-width: 90vw;\n    padding: 2rem;\n    border-radius: 0.5rem;\n    background-color: hsl(240, 5%, 30%);\n    color: hsl(0, 0%, 87%);\n    display: flex;\n    flex-direction: column;\n    gap: 0.5rem;\n    max-height: 80vh;\n    overflow-y: auto;\n`;\n\nconst HistoryTitle = styled.h2`\n    font-size: 1.5rem;\n`;\n\nconst ChangeDate = styled.div`\n    font-weight: 700;\n`;\n\nconst ChangesList = styled.ul`\n    margin-bottom: 1rem;\n`;\n\nconst ChangesListItem = styled.li`\n    margin-left: 1rem;\n`;\n\nconst historyData = [\n    {\n        date: \"2021/09/30\",\n        changes: [\"Updated to Patch 0.42.0\"],\n    },\n    {\n        date: \"2021/09/16\",\n        changes: [\"Updated to Patch 0.41.0\"],\n    },\n    {\n        date: \"2021/09/08\",\n        changes: [\"Changed percentage calculations\"],\n    },\n    {\n        date: \"2021/09/04\",\n        changes: [\n            \"Fixed Bandage/Coffee/Garlic images\",\n            \"Added new boxes for Temple + Dock\",\n            \"Changed Zoning for Archery Range\",\n        ],\n    },\n    {\n        date: \"2021/08\",\n        changes: [\"Created ERBS Loot Map\"],\n    },\n];\n\nfunction UpdateHistory() {\n    return (\n        <HistoryBox>\n            <HistoryTitle>Update History</HistoryTitle>\n            {historyData.map(({ date, changes }) => (\n                <>\n                    <ChangeDate>{date}</ChangeDate>\n                    <ChangesList>\n                        {changes.map((change) => (\n                            <ChangesListItem>{change}</ChangesListItem>\n                        ))}\n                    </ChangesList>\n                </>\n            ))}\n        </HistoryBox>\n    );\n}\n\nexport default UpdateHistory;\n","import UpdateHistory from \"./UpdateHistory\";\nexport default UpdateHistory;\n","import styled from \"styled-components\";\nimport { MapInteractionCSS } from \"react-map-interaction\";\nimport boxes from \"../../data/boxes.json\";\nimport { useState } from \"react\";\nimport Modal from \"../Modal\";\nimport { device } from \"../../utils/device\";\nimport UpdateHistory from \"../UpdateHistory\";\n\nexport const zoneColors = {\n    0: \"hsl(0,0%, 85%)\",\n    1: \"hsl(0, 100%, 45%)\",\n    2: \"hsl(55, 100%, 45%)\",\n    3: \"hsl(120, 100%, 45%)\",\n    4: \"hsl(200, 100%, 45%)\",\n    5: \"hsl(304, 100%, 45%)\",\n};\n\nconst StyledSvg = styled.svg`\n    width: 100%;\n    height: calc(100vh - 4px);\n    @media ${device.mobileLMax} {\n        height: calc(60vh - 4px);\n    }\n`;\n\nconst StyledText = styled.text`\n    fill: ${({ isColorEnabled, zone }) =>\n        isColorEnabled ? zoneColors[zone] : \"hsl(0, 0%, 75%)\"};\n    font-size: 10px;\n    font-family: Trebuchet MS, Lucida Grande, Lucida Sans Unicode, Lucida Sans,\n        Tahoma, sans-serif;\n    cursor: pointer;\n`;\n\nconst StyledCircle = styled.circle`\n    fill: ${({ isColorEnabled, zone }) =>\n        isColorEnabled ? zoneColors[zone] : \"hsl(0, 0%, 75%)\"};\n    cursor: pointer;\n    stroke-width: 0.2px;\n    stroke: hsl(0, 0%, 25%);\n`;\n\nconst SettingBox = styled.div`\n    position: absolute;\n    right: 1rem;\n    bottom: 1rem;\n    background-color: hsl(240, 5%, 30%);\n    color: hsl(0, 0%, 87%);\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    padding: 0.5rem 1rem;\n    border-radius: 0.25rem;\n    z-index: 2;\n`;\n\nconst CheckboxWithText = styled.div`\n    display: flex;\n    align-items: center;\n`;\n\nconst CheckboxText = styled.p`\n    margin-left: 0.25rem;\n`;\n\nconst Checkbox = styled.input``;\n\nconst MapDiv = styled.div`\n    position: relative;\n    flex-grow: 1;\n`;\n\nconst Credits = styled.div`\n    position: absolute;\n    color: hsl(0, 0%, 67%);\n    left: 0.5rem;\n    cursor: pointer;\n    z-index: 2;\n    bottom: 0.5rem;\n    :hover {\n        color: hsl(0, 0%, 87%);\n    }\n`;\n\nconst HistoryText = styled(Credits)`\n    top: 0.5rem;\n    bottom: auto;\n`;\n\nconst CreditsBox = styled.div`\n    width: 40rem;\n    max-width: 90vw;\n    padding: 2rem;\n    border-radius: 0.5rem;\n    background-color: hsl(240, 5%, 30%);\n    color: hsl(0, 0%, 87%);\n    display: flex;\n    flex-direction: column;\n    gap: 0.5rem;\n`;\n\nconst CreditLink = styled.a`\n    color: hsl(0, 0%, 87%);\n`;\n\nfunction BserMap({\n    setSelectedItem,\n    isNumberEnabled,\n    isColorEnabled,\n    setColorEnabled,\n    setNumberEnabled,\n}) {\n    const [isCreditsOpen, setIsCreditsOpen] = useState(false);\n    const [isHistoryOpen, setIsHistoryOpen] = useState(false);\n\n    return (\n        <MapDiv>\n            <Modal open={isCreditsOpen} onClose={() => setIsCreditsOpen(false)}>\n                <CreditsBox>\n                    <h3>Original Map Data Source</h3>\n                    <CreditLink\n                        href=\"https://media.discordapp.net/attachments/854879257549340680/879299030952316988/ClusterMap.png\"\n                        target=\"_blank\"\n                        rel=\"noopener noreferrer\"\n                    >\n                        Open Image\n                    </CreditLink>\n                    <p>\n                        Special thanks to the contributers: Wraith, Zorceress,\n                        Silvrr, LilyDango, KamLauBak, and YeetandSkeet\n                    </p>\n                    <h3>Created By MacTal</h3>\n                    <p>\n                        For suggestions or corrections, feel free to contact\n                        TheAsianLife#2560 on discord\n                    </p>\n                </CreditsBox>\n            </Modal>\n            <Modal open={isHistoryOpen} onClose={() => setIsHistoryOpen(false)}>\n                <UpdateHistory />\n            </Modal>\n            <Credits onClick={() => setIsCreditsOpen(true)}>Credits</Credits>\n            <HistoryText onClick={() => setIsHistoryOpen(true)}>\n                Last Updated: Patch 0.42.0\n            </HistoryText>\n            <SettingBox>\n                <CheckboxWithText>\n                    <Checkbox\n                        type=\"checkbox\"\n                        checked={isNumberEnabled}\n                        onChange={() => {\n                            setNumberEnabled(!isNumberEnabled);\n                        }}\n                    ></Checkbox>\n                    <CheckboxText>Numbers</CheckboxText>\n                </CheckboxWithText>\n                <CheckboxWithText>\n                    <Checkbox\n                        type=\"checkbox\"\n                        checked={isColorEnabled}\n                        onChange={() => {\n                            setColorEnabled(!isColorEnabled);\n                        }}\n                    ></Checkbox>\n                    <CheckboxText>Colors</CheckboxText>\n                </CheckboxWithText>\n            </SettingBox>\n            <MapInteractionCSS maxScale={6} minScale={0.95} showControls={true}>\n                <StyledSvg\n                    xmlns=\"http://www.w3.org/2000/svg\"\n                    xmlnsXlink=\"http://www.w3.org/1999/xlink\"\n                    viewBox=\"0 0 772 887\"\n                >\n                    {/* <title>ZoneMapping</title> */}\n                    <g id=\"Layer_1\" data-name=\"Layer 1\">\n                        <image\n                            width=\"772\"\n                            height=\"887\"\n                            xlinkHref={\n                                process.env.PUBLIC_URL + \"/MiniMap_01.png\"\n                            }\n                        />\n                    </g>\n                    {boxes.map((box) =>\n                        isNumberEnabled ? (\n                            <StyledText\n                                transform={`translate(${box.coords[0]} ${box.coords[1]} )`}\n                                zone={box.zone}\n                                isColorEnabled={isColorEnabled}\n                                onClick={() => {\n                                    setSelectedItem(box);\n                                }}\n                                onTouchEnd={() => {\n                                    setSelectedItem(box);\n                                }}\n                            >\n                                {box.quantity}\n                            </StyledText>\n                        ) : (\n                            <StyledCircle\n                                cx={parseFloat(box.coords[0]) + 3}\n                                cy={parseFloat(box.coords[1]) - 3}\n                                r=\"2.5\"\n                                isColorEnabled={isColorEnabled}\n                                zone={box.zone}\n                                onClick={() => {\n                                    setSelectedItem(box);\n                                }}\n                            ></StyledCircle>\n                        )\n                    )}\n                </StyledSvg>\n            </MapInteractionCSS>\n        </MapDiv>\n    );\n}\n\nexport default BserMap;\n","import styled from \"styled-components\";\nimport areas from \"../../data/areas.json\";\nimport areaItemCount from \"../../data/areaItemCount.json\";\nimport BserItem from \"../BserItem/BserItem\";\nimport boxes from \"../../data/boxes.json\";\nimport cdf from \"@stdlib/stats-base-dists-hypergeometric-cdf\";\nimport pmf from \"@stdlib/stats-base-dists-hypergeometric-pmf\";\nimport { zoneColors } from \"../BserMap/BserMap\";\nimport Tippy from \"@tippyjs/react\";\nimport { AiOutlineQuestionCircle } from \"react-icons/ai\";\nimport \"tippy.js/dist/tippy.css\";\nimport { device } from \"../../utils/device\";\n\nconst SidebarBox = styled.div`\n    width: 25%;\n    background-color: hsl(240, 5%, 30%);\n    display: flex;\n    position: relative;\n    padding: 0px 20px;\n    flex-direction: column;\n    align-items: start;\n    height: 100vh;\n    overflow-y: auto;\n\n    @media ${device.mobileLMax} {\n        width: 100%;\n        height: 40vh;\n    }\n`;\n\nconst Header = styled.h1`\n    margin: 0.8rem 0px;\n    color: hsl(0, 0%, 87%);\n`;\n\nconst Text = styled.p`\n    font-size: 1rem;\n    margin: 0.2rem 0px;\n    color: hsl(0, 0%, 60%);\n`;\n\nconst Subtitle = styled.h2`\n    margin: 0.4rem 0px;\n    color: ${({ color }) => color || \"hsl(0, 0%,87%)\"};\n`;\n\nconst ItemHolderBox = styled.div`\n    margin-bottom: 0.2rem;\n    display: flex;\n    flex-wrap: wrap;\n`;\n\nconst ItemWithPercentages = styled.div`\n    display: flex;\n    flex-direction: column;\n    align-items: start;\n`;\n\nconst SubSubTitle = styled.h3`\n    /* font-size: 0.8rem; */\n    color: hsl(0, 0%, 60%);\n`;\n\nconst SubSubtitleWithQuestionTooltip = styled.div`\n    margin: 0.4rem 0;\n    display: flex;\n    align-items: center;\n`;\n\nconst QuestionTooltip = styled(AiOutlineQuestionCircle)`\n    margin-left: 2px;\n    color: hsl(0, 0%, 60%);\n`;\n\nconst Info = styled.h3`\n    margin: 0.4rem 0px;\n    color: hsl(0, 0%, 87%);\n`;\n\nfunction SideBar({ selectedItem, isColorEnabled }) {\n    const area = areas[selectedItem.area];\n    const itemCount = areaItemCount[selectedItem.area];\n    let areaItem = 0;\n    const zoneItem = [];\n    let mandatoryCount = 0;\n    let leftoverCount = 0;\n\n    for (const box of boxes) {\n        if (box.area !== selectedItem.area) continue;\n        areaItem += box.quantity;\n\n        zoneItem[box.zone] = (zoneItem[box.zone] || 0) + box.quantity;\n    }\n\n    for (const item in itemCount) {\n        const quantity = itemCount[item];\n\n        mandatoryCount += Math.floor(quantity / 5);\n        leftoverCount += quantity % 5;\n    }\n\n    const zoneLeftovers = zoneItem.map((zone, index) => {\n        if (index === 0) return zone;\n        return zone - mandatoryCount;\n    });\n\n    const zoneName = selectedItem.zone\n        ? `Zone ${selectedItem.zone}`\n        : `Zoneless`;\n\n    return (\n        <SidebarBox>\n            <Header>ERBS Map</Header>\n            {selectedItem.area ? (\n                selectedItem.area && (\n                    <>\n                        <Subtitle>{area.englishName}</Subtitle>\n                        <Text>Items: {areaItem}</Text>\n                        <ItemHolderBox>\n                            {Object.keys(itemCount).map((item) => {\n                                const count = itemCount[item];\n\n                                return (\n                                    <BserItem item={item} quantity={count} />\n                                );\n                            })}\n                        </ItemHolderBox>\n                        {/* <Text>Items per zone: {mandatoryCount}</Text>\n                            <ItemHolderBox>\n                                {Object.keys(itemCount).map((item) => {\n                                    const count = Math.floor(itemCount[item] / 5);\n        \n                                    if (count === 0) return <></>;\n        \n                                    return <BserItem item={item} quantity={count} />;\n                                })}\n                            </ItemHolderBox>\n                            <Text>Leftovers: {leftoverCount}</Text>\n                            <ItemHolderBox>\n                                {Object.keys(itemCount).map((item) => {\n                                    const count = itemCount[item] % 5;\n        \n                                    if (count === 0) return <></>;\n        \n                                    return <BserItem item={item} quantity={count} />;\n                                })}\n                            </ItemHolderBox> */}\n                        <Subtitle\n                            color={\n                                isColorEnabled\n                                    ? zoneColors[selectedItem.zone]\n                                    : null\n                            }\n                        >\n                            {zoneName}\n                        </Subtitle>\n\n                        {selectedItem.zone ? (\n                            <>\n                                <Text>\n                                    Items in Zone: {zoneItem[selectedItem.zone]}\n                                </Text>\n                                <Text>\n                                    Extras: {zoneLeftovers[selectedItem.zone]}\n                                </Text>\n\n                                <SubSubtitleWithQuestionTooltip>\n                                    <SubSubTitle>\n                                        Item Chance in Zone\n                                    </SubSubTitle>\n                                    <Tippy\n                                        arrow={true}\n                                        content={\n                                            <span>\n                                                All percentages are{\" \"}\n                                                <b>estimates</b> due to the\n                                                complex nature of the boxes.\n                                                Zones with higher number of\n                                                boxes will have higher chances\n                                                than the estimate\n                                            </span>\n                                        }\n                                    >\n                                        <div>\n                                            <QuestionTooltip />\n                                        </div>\n                                    </Tippy>\n                                </SubSubtitleWithQuestionTooltip>\n\n                                <ItemHolderBox>\n                                    {Object.keys(itemCount).map((item) => {\n                                        const count = itemCount[item] % 5;\n\n                                        const mandatory =\n                                            selectedItem.zone !== 0\n                                                ? Math.floor(\n                                                      itemCount[item] / 5\n                                                  )\n                                                : 0;\n\n                                        const chances = {};\n\n                                        if (mandatory > 0)\n                                            chances[mandatory] = 100;\n\n                                        let currentExtra = 0;\n\n                                        while (true) {\n                                            currentExtra++;\n                                            const chance =\n                                                1 -\n                                                cdf(\n                                                    currentExtra,\n                                                    leftoverCount,\n                                                    count,\n                                                    zoneLeftovers[\n                                                        selectedItem.zone\n                                                    ]\n                                                ) +\n                                                pmf(\n                                                    currentExtra,\n                                                    leftoverCount,\n                                                    count,\n                                                    zoneLeftovers[\n                                                        selectedItem.zone\n                                                    ]\n                                                );\n\n                                            if (\n                                                chance <= 0.01 ||\n                                                currentExtra >= 4\n                                            )\n                                                break;\n\n                                            chances[currentExtra + mandatory] =\n                                                (chance * 100).toFixed(0);\n                                        }\n\n                                        return (\n                                            <ItemWithPercentages>\n                                                <BserItem item={item} />\n                                                {Object.keys(chances).map(\n                                                    (quantity) => {\n                                                        return (\n                                                            <Text>\n                                                                {quantity}:\n                                                                {\n                                                                    chances[\n                                                                        quantity\n                                                                    ]\n                                                                }\n                                                                %\n                                                            </Text>\n                                                        );\n                                                    }\n                                                )}\n                                            </ItemWithPercentages>\n                                        );\n                                    })}\n                                </ItemHolderBox>\n                            </>\n                        ) : (\n                            <>\n                                <Text>\n                                    Leftovers: {zoneItem[selectedItem.zone]}\n                                </Text>\n                                <SubSubtitleWithQuestionTooltip>\n                                    <SubSubTitle>\n                                        Item Chance in Selected Box\n                                    </SubSubTitle>\n                                    <Tippy\n                                        arrow={true}\n                                        content={\n                                            <span>\n                                                All percentages are{\" \"}\n                                                <b>estimates</b> due to the\n                                                complex nature of the boxes.\n                                                Expect the chance to be higher\n                                                than listed.\n                                            </span>\n                                        }\n                                    >\n                                        <div>\n                                            <QuestionTooltip />\n                                        </div>\n                                    </Tippy>\n                                </SubSubtitleWithQuestionTooltip>\n                                <ItemHolderBox>\n                                    {Object.keys(itemCount).map((item) => {\n                                        const count = itemCount[item] % 5;\n\n                                        if (count === 0) return <></>;\n\n                                        const chances = {};\n\n                                        let currentExtra = 0;\n\n                                        while (true) {\n                                            currentExtra++;\n                                            const chance =\n                                                1 -\n                                                cdf(\n                                                    currentExtra,\n                                                    leftoverCount,\n                                                    count,\n                                                    selectedItem.quantity\n                                                ) +\n                                                pmf(\n                                                    currentExtra,\n                                                    leftoverCount,\n                                                    count,\n                                                    selectedItem.quantity\n                                                );\n\n                                            if (\n                                                chance <= 0.01 ||\n                                                currentExtra >= 2\n                                            )\n                                                break;\n\n                                            chances[currentExtra] = (\n                                                chance * 100\n                                            ).toFixed(0);\n                                        }\n\n                                        return (\n                                            <ItemWithPercentages>\n                                                <BserItem item={item} />\n                                                {Object.keys(chances).map(\n                                                    (quantity) => {\n                                                        return (\n                                                            <Text>\n                                                                {quantity}:\n                                                                {\n                                                                    chances[\n                                                                        quantity\n                                                                    ]\n                                                                }\n                                                                %\n                                                            </Text>\n                                                        );\n                                                    }\n                                                )}\n                                            </ItemWithPercentages>\n                                        );\n                                    })}\n                                </ItemHolderBox>\n                            </>\n                        )}\n                    </>\n                )\n            ) : (\n                <Info>Select a box to start</Info>\n            )}\n        </SidebarBox>\n    );\n}\n\nexport default SideBar;\n","import SideBar from \"./SideBar\";\nexport default SideBar;\n","import BserMap from \"./BserMap\";\nexport default BserMap;\n","import SideBar from \"../SideBar\";\nimport BserMap from \"../BserMap\";\nimport styled from \"styled-components\";\nimport { useState } from \"react\";\nimport { device } from \"../../utils/device\";\n\nconst Wrapper = styled.div`\n    display: flex;\n    text-align: center;\n\n    @media ${device.mobileLMax} {\n        flex-direction: column;\n    }\n`;\n\nfunction MapSideBarWrapper() {\n    const [selectedItem, setSelectedItem] = useState({});\n    const [isColorEnabled, setColorEnabled] = useState(true);\n    const [isNumberEnabled, setNumberEnabled] = useState(true);\n\n    return (\n        <Wrapper>\n            <BserMap\n                selectedItem={selectedItem}\n                setSelectedItem={setSelectedItem}\n                isColorEnabled={isColorEnabled}\n                isNumberEnabled={isNumberEnabled}\n                setColorEnabled={setColorEnabled}\n                setNumberEnabled={setNumberEnabled}\n            />\n            <SideBar\n                selectedItem={selectedItem}\n                isColorEnabled={isColorEnabled}\n            />\n        </Wrapper>\n    );\n}\n\nexport default MapSideBarWrapper;\n","import MapSideBarWrapper from \"./MapSideBarWrapper\";\nexport default MapSideBarWrapper;\n","import styled from \"styled-components\";\nimport MapSideBarWrapper from \"./components/MapSideBarWrapper\";\n\nconst Background = styled.div`\n    background-color: hsl(0, 0%, 17.5%);\n`;\n\nfunction App() {\n    return (\n        <Background>\n            <MapSideBarWrapper />\n        </Background>\n    );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}